name: Build and Deploy

on:
  push:
    branches:
      - feature/*
  pull_request:
    types: [closed]
    branches:
      - poc

jobs:
  if_merged:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/poc') || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.ref == 'refs/heads/poc')
    environment:
      name: poc
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'

      - name: Install dependencies and build
        run: |
          npm install
          export CI=false
          npm run build

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-duration-seconds: 1200
          audience: sts.amazonaws.com  

      - name: Deploying distribution
        env:
          ENV: ${{ secrets.ENV }}
        run: |
          aws cloudformation validate-template --template-body file://portal.yml
          aws cloudformation deploy --stack-name fortress-stack-ui-${{ secrets.ENV }} --template-file portal.yml --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM --parameter-overrides Env=${{ secrets.ENV }}

      - name: Deploying to S3 bucket
        env:
          CFD_ID: ${{ secrets.CFD_ID }}
        run: |
          # printenv >  .env.${{ secrets.ENV }}
          # cat .env.${{ secrets.ENV }}
          aws s3 rm s3://fortress-stack-ui-${{ secrets.ENV }}/ --recursive
          aws s3 sync ./dist s3://fortress-stack-ui-${{ secrets.ENV}}/
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CFD_ID }} --paths "/*"

  notify_on_success:
    runs-on: ubuntu-latest
    needs: if_merged
    if: success()
    steps:
      - name: Notify Slack for pipeline success
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          REPO_NAME: ${{ secrets.REPO_NAME }}
          ENVIRONMENT: poc  
          REPO_SLUG: ${{ secrets.REPO_SLUG }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "GitHub Pipeline Status Notification",
            "attachments": [
              {
                "fields": [
                  {
                    "title": "Repository",
                    "value": "'${REPO_NAME}'"
                  },
                  {
                    "title": "Environment",
                    "value": "'${ENVIRONMENT}'"
                  },
                  {
                    "title": "Status",
                    "value": "SUCCESS",
                    "color": "00FF00"
                  },
                  {
                    "title": "Pipeline URL",
                    "value": "https://github.com/${{ secrets.REPO_SLUG }}/${{ secrets.REPO_NAME }}/actions/runs/${{ github.run_id }}"
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref }}"
                  }
                ]
              }
            ]
          }' $SLACK_WEBHOOK_URL

  notify_on_failure:
    runs-on: ubuntu-latest
    needs: if_merged
    if: failure()
    steps:
      - name: Notify Slack for pipeline failure
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          REPO_NAME: ${{ secrets.REPO_NAME }}
          ENVIRONMENT: poc 
          REPO_SLUG: ${{ secrets.REPO_SLUG }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "GitHub Pipeline Status Notification",
            "attachments": [
              {
                "fields": [
                  {
                    "title": "Repository",
                    "value": "'${REPO_NAME}'"
                  },
                  {
                    "title": "Environment",
                    "value": "'${ENVIRONMENT}'"
                  },
                  {
                    "title": "Status",
                    "value": "FAILED",
                    "color": "#FF0000"
                  },
                  {
                    "title": "Pipeline URL",
                    "value": "https://github.com/${{ secrets.REPO_SLUG }}/${{ secrets.REPO_NAME }}/actions/runs/${{ github.run_id }}"
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref }}"
                  }
                ]
              }
            ]
          }' $SLACK_WEBHOOK_URL
