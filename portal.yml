AWSTemplateFormatVersion: "2010-09-09"

#TODO:  add params for check same template
Parameters:
  Env:
    Type: String
    AllowedValues:
      - local
      - dev
      - stage
      - prod
      - poc  

Conditions:
  IsDev: !Equals [!Ref Env, dev]
  IsStage: !Equals [!Ref Env, stage]
  IsProd: !Equals [!Ref Env, prod]
  IsPoc: !Equals [!Ref Env, poc]

  
Resources:
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub ${AWS::StackName}-s3-origin-oai # take stack name from env , change env based on deployment

  StaticResourcesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}' # TODO fetch name form env suffix env on bucket
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: ProjectName
          Value: test
        - Key: Environment
          Value: !If [IsDev, Development, !Ref Env]

  StaticResourcesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticResourcesBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${StaticResourcesBucket}/*

  WhitelistIPSet:
    Type: 'AWS::WAFv2::IPSet'
    Properties: 
      Name: 'WhitelistIPSet'
      Scope: 'CLOUDFRONT'
      IPAddressVersion: 'IPV4'
      Addresses: 
        - '14.97.205.158/32'
        - '106.221.189.5/32'
        - '49.207.212.96/32'

  WhitelistRule:
    Type: 'AWS::WAFv2::RuleGroup'
    Properties:
      Name: 'WhitelistRule'
      Scope: 'CLOUDFRONT'
      Capacity: 100
      VisibilityConfig: 
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: 'WhitelistRule'
      Rules:
        - Name: 'AllowIpRule'
          Priority: 0
          Action: 
            Allow: {}
          Statement: 
            IPSetReferenceStatement:
              ARN: !GetAtt WhitelistIPSet.Arn
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: 'AllowIpRule'
        - Name: 'BlockRule'
          Priority: 1
          Action: 
            Block: {}
          Statement:
            NotStatement:
              Statement:
                GeoMatchStatement:
                  CountryCodes: 
                    - 'JP'
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: 'BlockRule'


  WebACL:
    Type: 'AWS::WAFv2::WebACL'
    Properties:
      Name: 'CloudFrontWhitelistWebACL'
      Scope: 'CLOUDFRONT'
      DefaultAction:
        Block: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: 'CloudFrontWhitelistWebACL'
      Rules:
        - Name: 'WhitelistRule'
          Priority: 1
          OverrideAction:
            None: {}
          Statement:
            RuleGroupReferenceStatement:
              ARN: !GetAtt WhitelistRule.Arn
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: 'WhitelistRule'

  WAFLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/waf/CLOUDFRONT/CloudFrontWhitelistWebACL'
      RetentionInDays: 7

  WAFLoggingConfiguration:
    Type: 'AWS::WAFv2::LoggingConfiguration'
    Properties:
      ResourceArn: !GetAtt WebACL.Arn
      LogDestinationConfigs:
        - !GetAtt WAFLogGroup.Arn
      LoggingFilter:
        DefaultBehavior: 'KEEP'
        Filters:
          - Behavior: 'KEEP'
            Requirement: 'MEETS_ANY'
            Conditions:
              - ActionCondition:
                  Action: 'BLOCK'
      RedactedFields:
        - SingleHeader:
            Name: 'Authorization'

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        WebACLId: !GetAtt WebACL.Arn
        Comment: !Sub "test-${Env}"
        Origins:
          - DomainName: !Sub ${StaticResourcesBucket}.s3.${AWS::Region}.amazonaws.com
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 500
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_All
      Tags:
        - Key: Project_Name
          Value: test
        - Key: Environment
          Value: !If [IsDev, Development, !Ref Env]