<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="108" passed="92" failed="16" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-06-24T18:01:33 IST" name="TestSuite" finished-at="2024-06-24T18:22:18 IST" duration-ms="1244909">
    <groups>
    </groups>
    <test started-at="2024-06-24T18:01:33 IST" name="LoginTestsChromeBrowserTabletPortrait" finished-at="2024-06-24T18:05:08 IST" duration-ms="214566">
      <class name="zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:01:55 IST" name="initialize" finished-at="2024-06-24T18:01:58 IST" duration-ms="2887" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidUsername_TestCase2()[pri:2, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:01:58 IST" name="testInvalidUsername_TestCase2" finished-at="2024-06-24T18:02:58 IST" duration-ms="60320" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidUserNameError(loginPage.java:154)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidUsername_TestCase2(Login_Invalid_TestCases.java:36)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[contains(text(),'Invalid username or password. Try again.')]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [bcd7934fe315c190cb672987699d0c32, findElement {using=xpath, value=//h6[contains(text(),'Invalid username or password. Try again.')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:63324}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:63324/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: bcd7934fe315c190cb672987699d0c32
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidUsername_TestCase2 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:02:58 IST" name="tearDown" finished-at="2024-06-24T18:02:58 IST" duration-ms="133" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:03:04 IST" name="initialize" finished-at="2024-06-24T18:03:07 IST" duration-ms="2740" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidPassword_TestCase3()[pri:3, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:03:07 IST" name="testInvalidPassword_TestCase3" finished-at="2024-06-24T18:04:07 IST" duration-ms="60290" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidPasswordError(loginPage.java:185)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidPassword_TestCase3(Login_Invalid_TestCases.java:44)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [c5969322dc200b8b707eb0b4cc037efd, findElement {using=xpath, value=//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:63400}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:63400/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: c5969322dc200b8b707eb0b4cc037efd
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidPassword_TestCase3 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:04:07 IST" name="tearDown" finished-at="2024-06-24T18:04:07 IST" duration-ms="138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:04:13 IST" name="initialize" finished-at="2024-06-24T18:04:16 IST" duration-ms="2826" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testTooLongUsername_TestCase4()[pri:4, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:04:16 IST" name="testTooLongUsername_TestCase4" finished-at="2024-06-24T18:04:16 IST" duration-ms="400" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTooLongUsername_TestCase4 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:04:16 IST" name="tearDown" finished-at="2024-06-24T18:04:16 IST" duration-ms="130" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:04:23 IST" name="initialize" finished-at="2024-06-24T18:04:26 IST" duration-ms="2833" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testMinLengthPassword_TestCase5()[pri:5, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:04:26 IST" name="testMinLengthPassword_TestCase5" finished-at="2024-06-24T18:04:27 IST" duration-ms="300" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMinLengthPassword_TestCase5 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:04:27 IST" name="tearDown" finished-at="2024-06-24T18:04:27 IST" duration-ms="128" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:04:39 IST" name="initialize" finished-at="2024-06-24T18:04:42 IST" duration-ms="2819" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testUsernameWithSpaces_TestCase6()[pri:6, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:04:42 IST" name="testUsernameWithSpaces_TestCase6" finished-at="2024-06-24T18:04:43 IST" duration-ms="356" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUsernameWithSpaces_TestCase6 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:04:43 IST" name="tearDown" finished-at="2024-06-24T18:04:43 IST" duration-ms="165" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:04:48 IST" name="initialize" finished-at="2024-06-24T18:04:51 IST" duration-ms="2791" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForEnabledLoginButton_TestCase7()[pri:7, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:04:51 IST" name="verifyForEnabledLoginButton_TestCase7" finished-at="2024-06-24T18:04:53 IST" duration-ms="2550" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForEnabledLoginButton_TestCase7 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:04:53 IST" name="tearDown" finished-at="2024-06-24T18:04:53 IST" duration-ms="136" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:04:58 IST" name="initialize" finished-at="2024-06-24T18:05:01 IST" duration-ms="2792" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsername_TestCase8()[pri:8, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:05:01 IST" name="verifyForDisabledLoginButtonForEmptyUsername_TestCase8" finished-at="2024-06-24T18:05:01 IST" duration-ms="145" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsername_TestCase8 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:05:01 IST" name="tearDown" finished-at="2024-06-24T18:05:02 IST" duration-ms="115" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:05:02 IST" name="initialize" finished-at="2024-06-24T18:05:04 IST" duration-ms="2768" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyPassword_TestCase9()[pri:9, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:05:04 IST" name="verifyForDisabledLoginButtonForEmptyPassword_TestCase9" finished-at="2024-06-24T18:05:04 IST" duration-ms="182" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyPassword_TestCase9 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:05:04 IST" name="tearDown" finished-at="2024-06-24T18:05:05 IST" duration-ms="116" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:05:05 IST" name="initialize" finished-at="2024-06-24T18:05:07 IST" duration-ms="2751" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10()[pri:10, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:05:07 IST" name="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10" finished-at="2024-06-24T18:05:07 IST" duration-ms="123" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-24T18:05:07 IST" name="tearDown" finished-at="2024-06-24T18:05:08 IST" duration-ms="125" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases -->
      <class name="zapcg.Capillary.LoginTestCases.Login_Valid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@5dd6264]" started-at="2024-06-24T18:01:49 IST" name="initialize" finished-at="2024-06-24T18:01:52 IST" duration-ms="3147" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testValidLogin_TestCase1()[pri:1, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@5dd6264]" started-at="2024-06-24T18:01:52 IST" name="testValidLogin_TestCase1" finished-at="2024-06-24T18:01:55 IST" duration-ms="2438" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLogin_TestCase1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@5dd6264]" started-at="2024-06-24T18:01:55 IST" name="tearDown" finished-at="2024-06-24T18:01:55 IST" duration-ms="94" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Valid_TestCases -->
      <class name="zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:01:33 IST" name="initialize" finished-at="2024-06-24T18:01:43 IST" duration-ms="10207" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="chooseValidLocationForNewUser()[pri:1, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:01:43 IST" name="chooseValidLocationForNewUser" finished-at="2024-06-24T18:01:49 IST" duration-ms="5843" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chooseValidLocationForNewUser -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:01:49 IST" name="tearDown" finished-at="2024-06-24T18:01:49 IST" duration-ms="184" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:02:58 IST" name="initialize" finished-at="2024-06-24T18:03:04 IST" duration-ms="5539" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyDropDownAvailability()[pri:2, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:03:04 IST" name="verifyDropDownAvailability" finished-at="2024-06-24T18:03:04 IST" duration-ms="49" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDropDownAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:03:04 IST" name="tearDown" finished-at="2024-06-24T18:03:04 IST" duration-ms="144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:07 IST" name="initialize" finished-at="2024-06-24T18:04:12 IST" duration-ms="5262" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyIfAbleToSelectOptionFromDropDown()[pri:3, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:12 IST" name="verifyIfAbleToSelectOptionFromDropDown" finished-at="2024-06-24T18:04:13 IST" duration-ms="179" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyIfAbleToSelectOptionFromDropDown -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:13 IST" name="tearDown" finished-at="2024-06-24T18:04:13 IST" duration-ms="148" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:16 IST" name="initialize" finished-at="2024-06-24T18:04:21 IST" duration-ms="4866" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyChooseLocationButtonAvailability()[pri:4, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:21 IST" name="verifyChooseLocationButtonAvailability" finished-at="2024-06-24T18:04:23 IST" duration-ms="2258" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyChooseLocationButtonAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:23 IST" name="tearDown" finished-at="2024-06-24T18:04:23 IST" duration-ms="142" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:27 IST" name="initialize" finished-at="2024-06-24T18:04:32 IST" duration-ms="5190" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyHeaderOfMemberLookupScreen()[pri:5, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:32 IST" name="verifyHeaderOfMemberLookupScreen" finished-at="2024-06-24T18:04:34 IST" duration-ms="1983" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyHeaderOfMemberLookupScreen -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:34 IST" name="tearDown" finished-at="2024-06-24T18:04:34 IST" duration-ms="145" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:34 IST" name="initialize" finished-at="2024-06-24T18:04:39 IST" duration-ms="5041" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLookupNavigation()[pri:6, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:39 IST" name="burgerIconMemberLookupNavigation" finished-at="2024-06-24T18:04:39 IST" duration-ms="129" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLookupNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:39 IST" name="tearDown" finished-at="2024-06-24T18:04:39 IST" duration-ms="177" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:43 IST" name="initialize" finished-at="2024-06-24T18:04:48 IST" duration-ms="5001" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLocationNavigation()[pri:7, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:48 IST" name="burgerIconMemberLocationNavigation" finished-at="2024-06-24T18:04:48 IST" duration-ms="100" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLocationNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:48 IST" name="tearDown" finished-at="2024-06-24T18:04:48 IST" duration-ms="175" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:53 IST" name="initialize" finished-at="2024-06-24T18:04:58 IST" duration-ms="4661" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconLogout()[pri:8, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:58 IST" name="burgerIconLogout" finished-at="2024-06-24T18:04:58 IST" duration-ms="120" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconLogout -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-24T18:04:58 IST" name="tearDown" finished-at="2024-06-24T18:04:58 IST" duration-ms="241" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases -->
    </test> <!-- LoginTestsChromeBrowserTabletPortrait -->
    <test started-at="2024-06-24T18:05:08 IST" name="LoginTestsChromeBrowserTabletLandscape" finished-at="2024-06-24T18:08:27 IST" duration-ms="199043">
      <class name="zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:05:19 IST" name="initialize" finished-at="2024-06-24T18:05:22 IST" duration-ms="2429" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidUsername_TestCase2()[pri:2, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:05:22 IST" name="testInvalidUsername_TestCase2" finished-at="2024-06-24T18:06:22 IST" duration-ms="60337" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidUserNameError(loginPage.java:154)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidUsername_TestCase2(Login_Invalid_TestCases.java:36)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[contains(text(),'Invalid username or password. Try again.')]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [3dc1e0068a341ea1948a02cd840d2aa8, findElement {using=xpath, value=//h6[contains(text(),'Invalid username or password. Try again.')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:63815}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:63815/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 3dc1e0068a341ea1948a02cd840d2aa8
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidUsername_TestCase2 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:06:22 IST" name="tearDown" finished-at="2024-06-24T18:06:22 IST" duration-ms="175" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:06:27 IST" name="initialize" finished-at="2024-06-24T18:06:30 IST" duration-ms="2525" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidPassword_TestCase3()[pri:3, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:06:30 IST" name="testInvalidPassword_TestCase3" finished-at="2024-06-24T18:07:30 IST" duration-ms="60281" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidPasswordError(loginPage.java:185)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidPassword_TestCase3(Login_Invalid_TestCases.java:44)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [396536b5895c5b5eada88972e26fdcbd, findElement {using=xpath, value=//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:63891}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:63891/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 396536b5895c5b5eada88972e26fdcbd
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidPassword_TestCase3 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:07:30 IST" name="tearDown" finished-at="2024-06-24T18:07:30 IST" duration-ms="144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:07:36 IST" name="initialize" finished-at="2024-06-24T18:07:38 IST" duration-ms="2384" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testTooLongUsername_TestCase4()[pri:4, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:07:38 IST" name="testTooLongUsername_TestCase4" finished-at="2024-06-24T18:07:39 IST" duration-ms="435" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTooLongUsername_TestCase4 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:07:39 IST" name="tearDown" finished-at="2024-06-24T18:07:39 IST" duration-ms="178" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:07:46 IST" name="initialize" finished-at="2024-06-24T18:07:48 IST" duration-ms="2405" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testMinLengthPassword_TestCase5()[pri:5, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:07:48 IST" name="testMinLengthPassword_TestCase5" finished-at="2024-06-24T18:07:49 IST" duration-ms="284" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMinLengthPassword_TestCase5 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:07:49 IST" name="tearDown" finished-at="2024-06-24T18:07:49 IST" duration-ms="112" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:08:01 IST" name="initialize" finished-at="2024-06-24T18:08:03 IST" duration-ms="2564" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testUsernameWithSpaces_TestCase6()[pri:6, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:08:03 IST" name="testUsernameWithSpaces_TestCase6" finished-at="2024-06-24T18:08:03 IST" duration-ms="293" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUsernameWithSpaces_TestCase6 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:08:03 IST" name="tearDown" finished-at="2024-06-24T18:08:04 IST" duration-ms="123" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:08:08 IST" name="initialize" finished-at="2024-06-24T18:08:11 IST" duration-ms="2498" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForEnabledLoginButton_TestCase7()[pri:7, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:08:11 IST" name="verifyForEnabledLoginButton_TestCase7" finished-at="2024-06-24T18:08:13 IST" duration-ms="2469" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForEnabledLoginButton_TestCase7 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:08:13 IST" name="tearDown" finished-at="2024-06-24T18:08:14 IST" duration-ms="137" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:08:18 IST" name="initialize" finished-at="2024-06-24T18:08:21 IST" duration-ms="2389" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsername_TestCase8()[pri:8, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:08:21 IST" name="verifyForDisabledLoginButtonForEmptyUsername_TestCase8" finished-at="2024-06-24T18:08:21 IST" duration-ms="162" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsername_TestCase8 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:08:21 IST" name="tearDown" finished-at="2024-06-24T18:08:21 IST" duration-ms="120" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:08:21 IST" name="initialize" finished-at="2024-06-24T18:08:24 IST" duration-ms="2475" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyPassword_TestCase9()[pri:9, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:08:24 IST" name="verifyForDisabledLoginButtonForEmptyPassword_TestCase9" finished-at="2024-06-24T18:08:24 IST" duration-ms="174" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyPassword_TestCase9 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:08:24 IST" name="tearDown" finished-at="2024-06-24T18:08:24 IST" duration-ms="111" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:08:24 IST" name="initialize" finished-at="2024-06-24T18:08:26 IST" duration-ms="2485" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10()[pri:10, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:08:26 IST" name="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10" finished-at="2024-06-24T18:08:27 IST" duration-ms="133" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-24T18:08:27 IST" name="tearDown" finished-at="2024-06-24T18:08:27 IST" duration-ms="119" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases -->
      <class name="zapcg.Capillary.LoginTestCases.Login_Valid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@3f197a46]" started-at="2024-06-24T18:05:15 IST" name="initialize" finished-at="2024-06-24T18:05:17 IST" duration-ms="2437" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testValidLogin_TestCase1()[pri:1, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@3f197a46]" started-at="2024-06-24T18:05:17 IST" name="testValidLogin_TestCase1" finished-at="2024-06-24T18:05:19 IST" duration-ms="2364" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLogin_TestCase1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@3f197a46]" started-at="2024-06-24T18:05:19 IST" name="tearDown" finished-at="2024-06-24T18:05:19 IST" duration-ms="85" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Valid_TestCases -->
      <class name="zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:05:08 IST" name="initialize" finished-at="2024-06-24T18:05:12 IST" duration-ms="4834" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="chooseValidLocationForNewUser()[pri:1, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:05:12 IST" name="chooseValidLocationForNewUser" finished-at="2024-06-24T18:05:14 IST" duration-ms="1939" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chooseValidLocationForNewUser -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:05:14 IST" name="tearDown" finished-at="2024-06-24T18:05:15 IST" duration-ms="126" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:06:22 IST" name="initialize" finished-at="2024-06-24T18:06:27 IST" duration-ms="4904" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyDropDownAvailability()[pri:2, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:06:27 IST" name="verifyDropDownAvailability" finished-at="2024-06-24T18:06:27 IST" duration-ms="49" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDropDownAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:06:27 IST" name="tearDown" finished-at="2024-06-24T18:06:27 IST" duration-ms="133" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:07:30 IST" name="initialize" finished-at="2024-06-24T18:07:36 IST" duration-ms="5227" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyIfAbleToSelectOptionFromDropDown()[pri:3, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:07:36 IST" name="verifyIfAbleToSelectOptionFromDropDown" finished-at="2024-06-24T18:07:36 IST" duration-ms="154" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyIfAbleToSelectOptionFromDropDown -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:07:36 IST" name="tearDown" finished-at="2024-06-24T18:07:36 IST" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:07:39 IST" name="initialize" finished-at="2024-06-24T18:07:44 IST" duration-ms="4674" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyChooseLocationButtonAvailability()[pri:4, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:07:44 IST" name="verifyChooseLocationButtonAvailability" finished-at="2024-06-24T18:07:46 IST" duration-ms="2266" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyChooseLocationButtonAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:07:46 IST" name="tearDown" finished-at="2024-06-24T18:07:46 IST" duration-ms="157" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:07:49 IST" name="initialize" finished-at="2024-06-24T18:07:54 IST" duration-ms="4851" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyHeaderOfMemberLookupScreen()[pri:5, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:07:54 IST" name="verifyHeaderOfMemberLookupScreen" finished-at="2024-06-24T18:07:55 IST" duration-ms="1432" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyHeaderOfMemberLookupScreen -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:07:55 IST" name="tearDown" finished-at="2024-06-24T18:07:55 IST" duration-ms="133" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:07:55 IST" name="initialize" finished-at="2024-06-24T18:08:00 IST" duration-ms="4998" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLookupNavigation()[pri:6, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:08:00 IST" name="burgerIconMemberLookupNavigation" finished-at="2024-06-24T18:08:00 IST" duration-ms="142" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLookupNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:08:00 IST" name="tearDown" finished-at="2024-06-24T18:08:01 IST" duration-ms="265" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:08:04 IST" name="initialize" finished-at="2024-06-24T18:08:08 IST" duration-ms="4507" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLocationNavigation()[pri:7, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:08:08 IST" name="burgerIconMemberLocationNavigation" finished-at="2024-06-24T18:08:08 IST" duration-ms="99" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLocationNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:08:08 IST" name="tearDown" finished-at="2024-06-24T18:08:08 IST" duration-ms="231" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:08:14 IST" name="initialize" finished-at="2024-06-24T18:08:18 IST" duration-ms="4663" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconLogout()[pri:8, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:08:18 IST" name="burgerIconLogout" finished-at="2024-06-24T18:08:18 IST" duration-ms="123" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconLogout -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-24T18:08:18 IST" name="tearDown" finished-at="2024-06-24T18:08:18 IST" duration-ms="156" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases -->
    </test> <!-- LoginTestsChromeBrowserTabletLandscape -->
    <test started-at="2024-06-24T18:08:27 IST" name="LoginTestsChromeBrowseriPhone11ProPortrait" finished-at="2024-06-24T18:11:51 IST" duration-ms="204031">
      <class name="zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:08:38 IST" name="initialize" finished-at="2024-06-24T18:08:41 IST" duration-ms="2725" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidUsername_TestCase2()[pri:2, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:08:41 IST" name="testInvalidUsername_TestCase2" finished-at="2024-06-24T18:09:41 IST" duration-ms="60364" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidUserNameError(loginPage.java:154)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidUsername_TestCase2(Login_Invalid_TestCases.java:36)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[contains(text(),'Invalid username or password. Try again.')]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [5a2dd0ff9878ce704fdf423da2acfcbc, findElement {using=xpath, value=//h6[contains(text(),'Invalid username or password. Try again.')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:64319}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:64319/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 5a2dd0ff9878ce704fdf423da2acfcbc
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidUsername_TestCase2 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:09:41 IST" name="tearDown" finished-at="2024-06-24T18:09:42 IST" duration-ms="138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:09:47 IST" name="initialize" finished-at="2024-06-24T18:09:50 IST" duration-ms="2801" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidPassword_TestCase3()[pri:3, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:09:50 IST" name="testInvalidPassword_TestCase3" finished-at="2024-06-24T18:10:50 IST" duration-ms="60334" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidPasswordError(loginPage.java:185)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidPassword_TestCase3(Login_Invalid_TestCases.java:44)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [e90fa2e13320d5ba009421cf830c1bcc, findElement {using=xpath, value=//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:64382}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:64382/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: e90fa2e13320d5ba009421cf830c1bcc
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidPassword_TestCase3 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:10:50 IST" name="tearDown" finished-at="2024-06-24T18:10:51 IST" duration-ms="175" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:10:56 IST" name="initialize" finished-at="2024-06-24T18:10:59 IST" duration-ms="2765" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testTooLongUsername_TestCase4()[pri:4, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:10:59 IST" name="testTooLongUsername_TestCase4" finished-at="2024-06-24T18:10:59 IST" duration-ms="474" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTooLongUsername_TestCase4 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:10:59 IST" name="tearDown" finished-at="2024-06-24T18:10:59 IST" duration-ms="198" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:07 IST" name="initialize" finished-at="2024-06-24T18:11:10 IST" duration-ms="2827" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testMinLengthPassword_TestCase5()[pri:5, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:10 IST" name="testMinLengthPassword_TestCase5" finished-at="2024-06-24T18:11:10 IST" duration-ms="275" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMinLengthPassword_TestCase5 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:10 IST" name="tearDown" finished-at="2024-06-24T18:11:10 IST" duration-ms="117" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:23 IST" name="initialize" finished-at="2024-06-24T18:11:26 IST" duration-ms="2781" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testUsernameWithSpaces_TestCase6()[pri:6, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:26 IST" name="testUsernameWithSpaces_TestCase6" finished-at="2024-06-24T18:11:26 IST" duration-ms="280" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUsernameWithSpaces_TestCase6 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:26 IST" name="tearDown" finished-at="2024-06-24T18:11:26 IST" duration-ms="116" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:31 IST" name="initialize" finished-at="2024-06-24T18:11:34 IST" duration-ms="2769" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForEnabledLoginButton_TestCase7()[pri:7, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:34 IST" name="verifyForEnabledLoginButton_TestCase7" finished-at="2024-06-24T18:11:36 IST" duration-ms="2029" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForEnabledLoginButton_TestCase7 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:36 IST" name="tearDown" finished-at="2024-06-24T18:11:36 IST" duration-ms="220" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:42 IST" name="initialize" finished-at="2024-06-24T18:11:44 IST" duration-ms="2696" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsername_TestCase8()[pri:8, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:44 IST" name="verifyForDisabledLoginButtonForEmptyUsername_TestCase8" finished-at="2024-06-24T18:11:45 IST" duration-ms="138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsername_TestCase8 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:45 IST" name="tearDown" finished-at="2024-06-24T18:11:45 IST" duration-ms="117" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:45 IST" name="initialize" finished-at="2024-06-24T18:11:47 IST" duration-ms="2761" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyPassword_TestCase9()[pri:9, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:47 IST" name="verifyForDisabledLoginButtonForEmptyPassword_TestCase9" finished-at="2024-06-24T18:11:48 IST" duration-ms="176" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyPassword_TestCase9 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:48 IST" name="tearDown" finished-at="2024-06-24T18:11:48 IST" duration-ms="111" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:48 IST" name="initialize" finished-at="2024-06-24T18:11:50 IST" duration-ms="2716" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10()[pri:10, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:50 IST" name="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10" finished-at="2024-06-24T18:11:51 IST" duration-ms="184" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-24T18:11:51 IST" name="tearDown" finished-at="2024-06-24T18:11:51 IST" duration-ms="99" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases -->
      <class name="zapcg.Capillary.LoginTestCases.Login_Valid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@6ca8564a]" started-at="2024-06-24T18:08:33 IST" name="initialize" finished-at="2024-06-24T18:08:36 IST" duration-ms="2750" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testValidLogin_TestCase1()[pri:1, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@6ca8564a]" started-at="2024-06-24T18:08:36 IST" name="testValidLogin_TestCase1" finished-at="2024-06-24T18:08:38 IST" duration-ms="2449" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLogin_TestCase1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@6ca8564a]" started-at="2024-06-24T18:08:38 IST" name="tearDown" finished-at="2024-06-24T18:08:38 IST" duration-ms="86" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Valid_TestCases -->
      <class name="zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:08:27 IST" name="initialize" finished-at="2024-06-24T18:08:32 IST" duration-ms="4925" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="chooseValidLocationForNewUser()[pri:1, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:08:32 IST" name="chooseValidLocationForNewUser" finished-at="2024-06-24T18:08:33 IST" duration-ms="1377" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chooseValidLocationForNewUser -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:08:33 IST" name="tearDown" finished-at="2024-06-24T18:08:33 IST" duration-ms="139" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:09:42 IST" name="initialize" finished-at="2024-06-24T18:09:47 IST" duration-ms="5400" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyDropDownAvailability()[pri:2, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:09:47 IST" name="verifyDropDownAvailability" finished-at="2024-06-24T18:09:47 IST" duration-ms="69" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDropDownAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:09:47 IST" name="tearDown" finished-at="2024-06-24T18:09:47 IST" duration-ms="145" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:10:51 IST" name="initialize" finished-at="2024-06-24T18:10:55 IST" duration-ms="4875" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyIfAbleToSelectOptionFromDropDown()[pri:3, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:10:55 IST" name="verifyIfAbleToSelectOptionFromDropDown" finished-at="2024-06-24T18:10:56 IST" duration-ms="165" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyIfAbleToSelectOptionFromDropDown -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:10:56 IST" name="tearDown" finished-at="2024-06-24T18:10:56 IST" duration-ms="291" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:10:59 IST" name="initialize" finished-at="2024-06-24T18:11:04 IST" duration-ms="5108" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyChooseLocationButtonAvailability()[pri:4, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:11:04 IST" name="verifyChooseLocationButtonAvailability" finished-at="2024-06-24T18:11:07 IST" duration-ms="2211" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyChooseLocationButtonAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:11:07 IST" name="tearDown" finished-at="2024-06-24T18:11:07 IST" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:11:10 IST" name="initialize" finished-at="2024-06-24T18:11:15 IST" duration-ms="5195" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyHeaderOfMemberLookupScreen()[pri:5, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:11:15 IST" name="verifyHeaderOfMemberLookupScreen" finished-at="2024-06-24T18:11:17 IST" duration-ms="1951" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyHeaderOfMemberLookupScreen -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:11:17 IST" name="tearDown" finished-at="2024-06-24T18:11:17 IST" duration-ms="170" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:11:17 IST" name="initialize" finished-at="2024-06-24T18:11:22 IST" duration-ms="5087" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLookupNavigation()[pri:6, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:11:22 IST" name="burgerIconMemberLookupNavigation" finished-at="2024-06-24T18:11:23 IST" duration-ms="119" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLookupNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:11:23 IST" name="tearDown" finished-at="2024-06-24T18:11:23 IST" duration-ms="201" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:11:26 IST" name="initialize" finished-at="2024-06-24T18:11:31 IST" duration-ms="5119" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLocationNavigation()[pri:7, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:11:31 IST" name="burgerIconMemberLocationNavigation" finished-at="2024-06-24T18:11:31 IST" duration-ms="96" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLocationNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:11:31 IST" name="tearDown" finished-at="2024-06-24T18:11:31 IST" duration-ms="184" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:11:36 IST" name="initialize" finished-at="2024-06-24T18:11:41 IST" duration-ms="5075" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconLogout()[pri:8, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:11:41 IST" name="burgerIconLogout" finished-at="2024-06-24T18:11:42 IST" duration-ms="112" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconLogout -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-24T18:11:42 IST" name="tearDown" finished-at="2024-06-24T18:11:42 IST" duration-ms="161" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases -->
    </test> <!-- LoginTestsChromeBrowseriPhone11ProPortrait -->
    <test started-at="2024-06-24T18:11:51 IST" name="LoginTestsChromeBrowseriPhone11ProLandscape" finished-at="2024-06-24T18:15:13 IST" duration-ms="201795">
      <class name="zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:12:04 IST" name="initialize" finished-at="2024-06-24T18:12:06 IST" duration-ms="2582" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidUsername_TestCase2()[pri:2, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:12:06 IST" name="testInvalidUsername_TestCase2" finished-at="2024-06-24T18:13:07 IST" duration-ms="60425" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidUserNameError(loginPage.java:154)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidUsername_TestCase2(Login_Invalid_TestCases.java:36)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[contains(text(),'Invalid username or password. Try again.')]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [025852a9947ceaf935c8bb324a5bcae2, findElement {using=xpath, value=//h6[contains(text(),'Invalid username or password. Try again.')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:64810}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:64810/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 025852a9947ceaf935c8bb324a5bcae2
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidUsername_TestCase2 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:13:07 IST" name="tearDown" finished-at="2024-06-24T18:13:07 IST" duration-ms="138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:13:12 IST" name="initialize" finished-at="2024-06-24T18:13:14 IST" duration-ms="2404" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidPassword_TestCase3()[pri:3, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:13:14 IST" name="testInvalidPassword_TestCase3" finished-at="2024-06-24T18:14:15 IST" duration-ms="60354" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidPasswordError(loginPage.java:185)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidPassword_TestCase3(Login_Invalid_TestCases.java:44)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [bf588d5879fdc913fd1d3ffbaebc24cd, findElement {using=xpath, value=//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:64881}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:64881/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: bf588d5879fdc913fd1d3ffbaebc24cd
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidPassword_TestCase3 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:14:15 IST" name="tearDown" finished-at="2024-06-24T18:14:15 IST" duration-ms="153" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:14:20 IST" name="initialize" finished-at="2024-06-24T18:14:22 IST" duration-ms="2529" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testTooLongUsername_TestCase4()[pri:4, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:14:22 IST" name="testTooLongUsername_TestCase4" finished-at="2024-06-24T18:14:23 IST" duration-ms="496" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTooLongUsername_TestCase4 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:14:23 IST" name="tearDown" finished-at="2024-06-24T18:14:23 IST" duration-ms="134" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:14:30 IST" name="initialize" finished-at="2024-06-24T18:14:33 IST" duration-ms="2498" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testMinLengthPassword_TestCase5()[pri:5, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:14:33 IST" name="testMinLengthPassword_TestCase5" finished-at="2024-06-24T18:14:33 IST" duration-ms="303" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMinLengthPassword_TestCase5 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:14:33 IST" name="tearDown" finished-at="2024-06-24T18:14:33 IST" duration-ms="129" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:14:46 IST" name="initialize" finished-at="2024-06-24T18:14:48 IST" duration-ms="2342" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testUsernameWithSpaces_TestCase6()[pri:6, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:14:48 IST" name="testUsernameWithSpaces_TestCase6" finished-at="2024-06-24T18:14:48 IST" duration-ms="309" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUsernameWithSpaces_TestCase6 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:14:48 IST" name="tearDown" finished-at="2024-06-24T18:14:49 IST" duration-ms="116" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:14:54 IST" name="initialize" finished-at="2024-06-24T18:14:56 IST" duration-ms="2386" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForEnabledLoginButton_TestCase7()[pri:7, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:14:56 IST" name="verifyForEnabledLoginButton_TestCase7" finished-at="2024-06-24T18:14:59 IST" duration-ms="2508" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForEnabledLoginButton_TestCase7 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:14:59 IST" name="tearDown" finished-at="2024-06-24T18:14:59 IST" duration-ms="180" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:15:04 IST" name="initialize" finished-at="2024-06-24T18:15:07 IST" duration-ms="2404" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsername_TestCase8()[pri:8, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:15:07 IST" name="verifyForDisabledLoginButtonForEmptyUsername_TestCase8" finished-at="2024-06-24T18:15:07 IST" duration-ms="151" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsername_TestCase8 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:15:07 IST" name="tearDown" finished-at="2024-06-24T18:15:07 IST" duration-ms="111" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:15:07 IST" name="initialize" finished-at="2024-06-24T18:15:09 IST" duration-ms="2557" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyPassword_TestCase9()[pri:9, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:15:09 IST" name="verifyForDisabledLoginButtonForEmptyPassword_TestCase9" finished-at="2024-06-24T18:15:10 IST" duration-ms="259" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyPassword_TestCase9 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:15:10 IST" name="tearDown" finished-at="2024-06-24T18:15:10 IST" duration-ms="151" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:15:10 IST" name="initialize" finished-at="2024-06-24T18:15:12 IST" duration-ms="2439" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10()[pri:10, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:15:12 IST" name="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10" finished-at="2024-06-24T18:15:12 IST" duration-ms="153" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-24T18:15:12 IST" name="tearDown" finished-at="2024-06-24T18:15:13 IST" duration-ms="125" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases -->
      <class name="zapcg.Capillary.LoginTestCases.Login_Valid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@4ac3c60d]" started-at="2024-06-24T18:11:58 IST" name="initialize" finished-at="2024-06-24T18:12:01 IST" duration-ms="2472" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testValidLogin_TestCase1()[pri:1, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@4ac3c60d]" started-at="2024-06-24T18:12:01 IST" name="testValidLogin_TestCase1" finished-at="2024-06-24T18:12:03 IST" duration-ms="2514" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLogin_TestCase1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@4ac3c60d]" started-at="2024-06-24T18:12:03 IST" name="tearDown" finished-at="2024-06-24T18:12:04 IST" duration-ms="92" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Valid_TestCases -->
      <class name="zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:11:51 IST" name="initialize" finished-at="2024-06-24T18:11:55 IST" duration-ms="4723" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="chooseValidLocationForNewUser()[pri:1, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:11:55 IST" name="chooseValidLocationForNewUser" finished-at="2024-06-24T18:11:58 IST" duration-ms="2890" status="FAIL">
          <exception class="org.openqa.selenium.ElementClickInterceptedException">
            <message>
              <![CDATA[element click intercepted: Element <button class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary css-y7km40" tabindex="0" type="button" data-testid="LS014B" id="LS014B">...</button> is not clickable at point (389, 208). Other element would receive the click: <li tabindex="-1" role="option" id="LS013OP1" data-option-index="1" aria-disabled="false" aria-selected="false" class="MuiAutocomplete-option" data-testid="LS013OP1">...</li>
  (Session info: chrome=126.0.6478.62)
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [5b5b5514af41b5c88d5507794e0e13fe, clickElement {id=f.9B0FFD0D69DC76D080C71624E30E8051.d.FB5FDBDDC18E5646B0CAA3FA5B441EE2.e.54}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:64755}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:64755/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Element: [[ChromeDriver: chrome on windows (5b5b5514af41b5c88d5507794e0e13fe)] -> xpath: //button[@id='LS014B']]
Session ID: 5b5b5514af41b5c88d5507794e0e13fe]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.ElementClickInterceptedException: element click intercepted: Element <button class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary css-y7km40" tabindex="0" type="button" data-testid="LS014B" id="LS014B">...</button> is not clickable at point (389, 208). Other element would receive the click: <li tabindex="-1" role="option" id="LS013OP1" data-option-index="1" aria-disabled="false" aria-selected="false" class="MuiAutocomplete-option" data-testid="LS013OP1">...</li>
  (Session info: chrome=126.0.6478.62)
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [5b5b5514af41b5c88d5507794e0e13fe, clickElement {id=f.9B0FFD0D69DC76D080C71624E30E8051.d.FB5FDBDDC18E5646B0CAA3FA5B441EE2.e.54}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:64755}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:64755/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Element: [[ChromeDriver: chrome on windows (5b5b5514af41b5c88d5507794e0e13fe)] -> xpath: //button[@id='LS014B']]
Session ID: 5b5b5514af41b5c88d5507794e0e13fe
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:223)
at org.openqa.selenium.remote.RemoteWebElement.click(RemoteWebElement.java:76)
at jdk.internal.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:51)
at jdk.proxy2/jdk.proxy2.$Proxy10.click(Unknown Source)
at zapcg.Capillary.PageObject.locationSelectionPage.clickOnChooseLocationButton(locationSelectionPage.java:149)
at zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases.chooseValidLocationForNewUser(Location_ExistingUser_TestCases.java:53)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.ElementClickInterceptedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chooseValidLocationForNewUser -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:11:58 IST" name="tearDown" finished-at="2024-06-24T18:11:58 IST" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:13:07 IST" name="initialize" finished-at="2024-06-24T18:13:12 IST" duration-ms="4999" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyDropDownAvailability()[pri:2, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:13:12 IST" name="verifyDropDownAvailability" finished-at="2024-06-24T18:13:12 IST" duration-ms="61" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDropDownAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:13:12 IST" name="tearDown" finished-at="2024-06-24T18:13:12 IST" duration-ms="173" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:14:15 IST" name="initialize" finished-at="2024-06-24T18:14:19 IST" duration-ms="4431" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyIfAbleToSelectOptionFromDropDown()[pri:3, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:14:19 IST" name="verifyIfAbleToSelectOptionFromDropDown" finished-at="2024-06-24T18:14:19 IST" duration-ms="161" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyIfAbleToSelectOptionFromDropDown -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:14:19 IST" name="tearDown" finished-at="2024-06-24T18:14:20 IST" duration-ms="313" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:14:23 IST" name="initialize" finished-at="2024-06-24T18:14:28 IST" duration-ms="4937" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyChooseLocationButtonAvailability()[pri:4, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:14:28 IST" name="verifyChooseLocationButtonAvailability" finished-at="2024-06-24T18:14:30 IST" duration-ms="2258" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyChooseLocationButtonAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:14:30 IST" name="tearDown" finished-at="2024-06-24T18:14:30 IST" duration-ms="149" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:14:33 IST" name="initialize" finished-at="2024-06-24T18:14:38 IST" duration-ms="4772" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyHeaderOfMemberLookupScreen()[pri:5, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:14:38 IST" name="verifyHeaderOfMemberLookupScreen" finished-at="2024-06-24T18:14:41 IST" duration-ms="3197" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[An error occurred while verifying the dropdown selections: element click intercepted: Element <button class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary css-y7km40" tabindex="0" type="button" data-testid="LS014B" id="LS014B">...</button> is not clickable at point (389, 208). Other element would receive the click: <li tabindex="-1" role="option" id="LS013OP1" data-option-index="1" aria-disabled="false" aria-selected="false" class="MuiAutocomplete-option" data-testid="LS013OP1">...</li>
  (Session info: chrome=126.0.6478.62)
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [54736f452dc4c8ac58517d2a392f662b, clickElement {id=f.A1AF7AF33AFE4ABD3FC932F153322155.d.1B9D5AD4C4709E29E46CAE9670D2CA0D.e.54}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:65100}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:65100/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Element: [[ChromeDriver: chrome on windows (54736f452dc4c8ac58517d2a392f662b)] -> xpath: //button[@id='LS014B']]
Session ID: 54736f452dc4c8ac58517d2a392f662b]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: An error occurred while verifying the dropdown selections: element click intercepted: Element <button class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary css-y7km40" tabindex="0" type="button" data-testid="LS014B" id="LS014B">...</button> is not clickable at point (389, 208). Other element would receive the click: <li tabindex="-1" role="option" id="LS013OP1" data-option-index="1" aria-disabled="false" aria-selected="false" class="MuiAutocomplete-option" data-testid="LS013OP1">...</li>
  (Session info: chrome=126.0.6478.62)
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [54736f452dc4c8ac58517d2a392f662b, clickElement {id=f.A1AF7AF33AFE4ABD3FC932F153322155.d.1B9D5AD4C4709E29E46CAE9670D2CA0D.e.54}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:65100}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:65100/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Element: [[ChromeDriver: chrome on windows (54736f452dc4c8ac58517d2a392f662b)] -> xpath: //button[@id='LS014B']]
Session ID: 54736f452dc4c8ac58517d2a392f662b
at org.testng.Assert.fail(Assert.java:111)
at zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases.verifyHeaderOfMemberLookupScreen(Location_ExistingUser_TestCases.java:150)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyHeaderOfMemberLookupScreen -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:14:41 IST" name="tearDown" finished-at="2024-06-24T18:14:41 IST" duration-ms="148" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:14:41 IST" name="initialize" finished-at="2024-06-24T18:14:45 IST" duration-ms="4156" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLookupNavigation()[pri:6, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:14:45 IST" name="burgerIconMemberLookupNavigation" finished-at="2024-06-24T18:14:46 IST" duration-ms="112" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLookupNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:14:46 IST" name="tearDown" finished-at="2024-06-24T18:14:46 IST" duration-ms="164" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:14:49 IST" name="initialize" finished-at="2024-06-24T18:14:54 IST" duration-ms="5111" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLocationNavigation()[pri:7, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:14:54 IST" name="burgerIconMemberLocationNavigation" finished-at="2024-06-24T18:14:54 IST" duration-ms="102" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLocationNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:14:54 IST" name="tearDown" finished-at="2024-06-24T18:14:54 IST" duration-ms="303" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:14:59 IST" name="initialize" finished-at="2024-06-24T18:15:04 IST" duration-ms="4730" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconLogout()[pri:8, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:15:04 IST" name="burgerIconLogout" finished-at="2024-06-24T18:15:04 IST" duration-ms="122" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconLogout -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-24T18:15:04 IST" name="tearDown" finished-at="2024-06-24T18:15:04 IST" duration-ms="203" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases -->
    </test> <!-- LoginTestsChromeBrowseriPhone11ProLandscape -->
    <test started-at="2024-06-24T18:15:13 IST" name="LoginTestsChromeBrowserGalaxyS20Portrait" finished-at="2024-06-24T18:18:40 IST" duration-ms="207347">
      <class name="zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:15:25 IST" name="initialize" finished-at="2024-06-24T18:15:28 IST" duration-ms="2770" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidUsername_TestCase2()[pri:2, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:15:28 IST" name="testInvalidUsername_TestCase2" finished-at="2024-06-24T18:16:28 IST" duration-ms="60297" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidUserNameError(loginPage.java:154)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidUsername_TestCase2(Login_Invalid_TestCases.java:36)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[contains(text(),'Invalid username or password. Try again.')]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [fcdbe5b0b4cb83552693b33dc8079e94, findElement {using=xpath, value=//h6[contains(text(),'Invalid username or password. Try again.')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:65371}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:65371/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: fcdbe5b0b4cb83552693b33dc8079e94
at jdk.internal.reflect.GeneratedConstructorAccessor36.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidUsername_TestCase2 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:16:28 IST" name="tearDown" finished-at="2024-06-24T18:16:28 IST" duration-ms="131" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:16:34 IST" name="initialize" finished-at="2024-06-24T18:16:37 IST" duration-ms="2801" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidPassword_TestCase3()[pri:3, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:16:37 IST" name="testInvalidPassword_TestCase3" finished-at="2024-06-24T18:17:37 IST" duration-ms="60270" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidPasswordError(loginPage.java:185)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidPassword_TestCase3(Login_Invalid_TestCases.java:44)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [04b9a6c8e19c9e0563075c5eb62d6603, findElement {using=xpath, value=//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:65437}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:65437/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 04b9a6c8e19c9e0563075c5eb62d6603
at jdk.internal.reflect.GeneratedConstructorAccessor36.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidPassword_TestCase3 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:17:37 IST" name="tearDown" finished-at="2024-06-24T18:17:37 IST" duration-ms="126" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:17:43 IST" name="initialize" finished-at="2024-06-24T18:17:46 IST" duration-ms="2799" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testTooLongUsername_TestCase4()[pri:4, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:17:46 IST" name="testTooLongUsername_TestCase4" finished-at="2024-06-24T18:17:46 IST" duration-ms="459" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTooLongUsername_TestCase4 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:17:46 IST" name="tearDown" finished-at="2024-06-24T18:17:46 IST" duration-ms="111" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:17:55 IST" name="initialize" finished-at="2024-06-24T18:17:58 IST" duration-ms="2922" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testMinLengthPassword_TestCase5()[pri:5, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:17:58 IST" name="testMinLengthPassword_TestCase5" finished-at="2024-06-24T18:17:58 IST" duration-ms="274" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMinLengthPassword_TestCase5 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:17:58 IST" name="tearDown" finished-at="2024-06-24T18:17:59 IST" duration-ms="152" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:18:11 IST" name="initialize" finished-at="2024-06-24T18:18:14 IST" duration-ms="2817" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testUsernameWithSpaces_TestCase6()[pri:6, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:18:14 IST" name="testUsernameWithSpaces_TestCase6" finished-at="2024-06-24T18:18:14 IST" duration-ms="330" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUsernameWithSpaces_TestCase6 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:18:14 IST" name="tearDown" finished-at="2024-06-24T18:18:15 IST" duration-ms="119" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:18:20 IST" name="initialize" finished-at="2024-06-24T18:18:23 IST" duration-ms="2811" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForEnabledLoginButton_TestCase7()[pri:7, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:18:23 IST" name="verifyForEnabledLoginButton_TestCase7" finished-at="2024-06-24T18:18:25 IST" duration-ms="1955" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForEnabledLoginButton_TestCase7 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:18:25 IST" name="tearDown" finished-at="2024-06-24T18:18:25 IST" duration-ms="163" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:18:31 IST" name="initialize" finished-at="2024-06-24T18:18:34 IST" duration-ms="2711" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsername_TestCase8()[pri:8, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:18:34 IST" name="verifyForDisabledLoginButtonForEmptyUsername_TestCase8" finished-at="2024-06-24T18:18:34 IST" duration-ms="144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsername_TestCase8 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:18:34 IST" name="tearDown" finished-at="2024-06-24T18:18:34 IST" duration-ms="111" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:18:34 IST" name="initialize" finished-at="2024-06-24T18:18:37 IST" duration-ms="2735" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyPassword_TestCase9()[pri:9, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:18:37 IST" name="verifyForDisabledLoginButtonForEmptyPassword_TestCase9" finished-at="2024-06-24T18:18:37 IST" duration-ms="183" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyPassword_TestCase9 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:18:37 IST" name="tearDown" finished-at="2024-06-24T18:18:37 IST" duration-ms="130" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:18:37 IST" name="initialize" finished-at="2024-06-24T18:18:40 IST" duration-ms="2761" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10()[pri:10, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:18:40 IST" name="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10" finished-at="2024-06-24T18:18:40 IST" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-24T18:18:40 IST" name="tearDown" finished-at="2024-06-24T18:18:40 IST" duration-ms="138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases -->
      <class name="zapcg.Capillary.LoginTestCases.Login_Valid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@3d74bf60]" started-at="2024-06-24T18:15:20 IST" name="initialize" finished-at="2024-06-24T18:15:22 IST" duration-ms="2804" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testValidLogin_TestCase1()[pri:1, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@3d74bf60]" started-at="2024-06-24T18:15:22 IST" name="testValidLogin_TestCase1" finished-at="2024-06-24T18:15:25 IST" duration-ms="2435" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLogin_TestCase1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@3d74bf60]" started-at="2024-06-24T18:15:25 IST" name="tearDown" finished-at="2024-06-24T18:15:25 IST" duration-ms="179" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Valid_TestCases -->
      <class name="zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:15:13 IST" name="initialize" finished-at="2024-06-24T18:15:18 IST" duration-ms="5037" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="chooseValidLocationForNewUser()[pri:1, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:15:18 IST" name="chooseValidLocationForNewUser" finished-at="2024-06-24T18:15:19 IST" duration-ms="1881" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chooseValidLocationForNewUser -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:15:19 IST" name="tearDown" finished-at="2024-06-24T18:15:20 IST" duration-ms="127" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:16:28 IST" name="initialize" finished-at="2024-06-24T18:16:34 IST" duration-ms="5378" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyDropDownAvailability()[pri:2, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:16:34 IST" name="verifyDropDownAvailability" finished-at="2024-06-24T18:16:34 IST" duration-ms="37" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDropDownAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:16:34 IST" name="tearDown" finished-at="2024-06-24T18:16:34 IST" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:17:37 IST" name="initialize" finished-at="2024-06-24T18:17:42 IST" duration-ms="5488" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyIfAbleToSelectOptionFromDropDown()[pri:3, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:17:42 IST" name="verifyIfAbleToSelectOptionFromDropDown" finished-at="2024-06-24T18:17:43 IST" duration-ms="170" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyIfAbleToSelectOptionFromDropDown -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:17:43 IST" name="tearDown" finished-at="2024-06-24T18:17:43 IST" duration-ms="117" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:17:46 IST" name="initialize" finished-at="2024-06-24T18:17:51 IST" duration-ms="5164" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyChooseLocationButtonAvailability()[pri:4, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:17:51 IST" name="verifyChooseLocationButtonAvailability" finished-at="2024-06-24T18:17:55 IST" duration-ms="3876" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyChooseLocationButtonAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:17:55 IST" name="tearDown" finished-at="2024-06-24T18:17:55 IST" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:17:59 IST" name="initialize" finished-at="2024-06-24T18:18:04 IST" duration-ms="4999" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyHeaderOfMemberLookupScreen()[pri:5, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:18:04 IST" name="verifyHeaderOfMemberLookupScreen" finished-at="2024-06-24T18:18:06 IST" duration-ms="1956" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyHeaderOfMemberLookupScreen -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:18:06 IST" name="tearDown" finished-at="2024-06-24T18:18:06 IST" duration-ms="145" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:18:06 IST" name="initialize" finished-at="2024-06-24T18:18:11 IST" duration-ms="5336" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLookupNavigation()[pri:6, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:18:11 IST" name="burgerIconMemberLookupNavigation" finished-at="2024-06-24T18:18:11 IST" duration-ms="116" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLookupNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:18:11 IST" name="tearDown" finished-at="2024-06-24T18:18:11 IST" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:18:15 IST" name="initialize" finished-at="2024-06-24T18:18:20 IST" duration-ms="5272" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLocationNavigation()[pri:7, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:18:20 IST" name="burgerIconMemberLocationNavigation" finished-at="2024-06-24T18:18:20 IST" duration-ms="128" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLocationNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:18:20 IST" name="tearDown" finished-at="2024-06-24T18:18:20 IST" duration-ms="149" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:18:25 IST" name="initialize" finished-at="2024-06-24T18:18:31 IST" duration-ms="5480" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconLogout()[pri:8, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:18:31 IST" name="burgerIconLogout" finished-at="2024-06-24T18:18:31 IST" duration-ms="110" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconLogout -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-24T18:18:31 IST" name="tearDown" finished-at="2024-06-24T18:18:31 IST" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases -->
    </test> <!-- LoginTestsChromeBrowserGalaxyS20Portrait -->
    <test started-at="2024-06-24T18:18:40 IST" name="LoginTestsChromeBrowserGalaxyS20Landscape" finished-at="2024-06-24T18:22:18 IST" duration-ms="218020">
      <class name="zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:18:53 IST" name="initialize" finished-at="2024-06-24T18:18:56 IST" duration-ms="2712" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidUsername_TestCase2()[pri:2, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:18:56 IST" name="testInvalidUsername_TestCase2" finished-at="2024-06-24T18:19:57 IST" duration-ms="60428" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidUserNameError(loginPage.java:154)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidUsername_TestCase2(Login_Invalid_TestCases.java:36)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[contains(text(),'Invalid username or password. Try again.')]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [b04a074cd00ac70936b99d51d5a7a314, findElement {using=xpath, value=//h6[contains(text(),'Invalid username or password. Try again.')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:49751}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:49751/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: b04a074cd00ac70936b99d51d5a7a314
at jdk.internal.reflect.GeneratedConstructorAccessor36.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidUsername_TestCase2 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:19:57 IST" name="tearDown" finished-at="2024-06-24T18:19:57 IST" duration-ms="185" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:20:04 IST" name="initialize" finished-at="2024-06-24T18:20:07 IST" duration-ms="2884" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidPassword_TestCase3()[pri:3, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:20:07 IST" name="testInvalidPassword_TestCase3" finished-at="2024-06-24T18:21:07 IST" duration-ms="60419" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidPasswordError(loginPage.java:185)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidPassword_TestCase3(Login_Invalid_TestCases.java:44)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [638c1f5ae2e69de87ec573da75c00de0, findElement {using=xpath, value=//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:49827}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:49827/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 638c1f5ae2e69de87ec573da75c00de0
at jdk.internal.reflect.GeneratedConstructorAccessor36.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidPassword_TestCase3 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:21:07 IST" name="tearDown" finished-at="2024-06-24T18:21:08 IST" duration-ms="288" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:21:15 IST" name="initialize" finished-at="2024-06-24T18:21:18 IST" duration-ms="2898" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testTooLongUsername_TestCase4()[pri:4, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:21:18 IST" name="testTooLongUsername_TestCase4" finished-at="2024-06-24T18:21:18 IST" duration-ms="679" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTooLongUsername_TestCase4 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:21:18 IST" name="tearDown" finished-at="2024-06-24T18:21:18 IST" duration-ms="198" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:21:26 IST" name="initialize" finished-at="2024-06-24T18:21:29 IST" duration-ms="2996" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testMinLengthPassword_TestCase5()[pri:5, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:21:29 IST" name="testMinLengthPassword_TestCase5" finished-at="2024-06-24T18:21:30 IST" duration-ms="559" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMinLengthPassword_TestCase5 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:21:30 IST" name="tearDown" finished-at="2024-06-24T18:21:30 IST" duration-ms="165" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:21:47 IST" name="initialize" finished-at="2024-06-24T18:21:49 IST" duration-ms="2700" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testUsernameWithSpaces_TestCase6()[pri:6, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:21:49 IST" name="testUsernameWithSpaces_TestCase6" finished-at="2024-06-24T18:21:50 IST" duration-ms="605" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUsernameWithSpaces_TestCase6 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:21:50 IST" name="tearDown" finished-at="2024-06-24T18:21:50 IST" duration-ms="163" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:21:57 IST" name="initialize" finished-at="2024-06-24T18:22:00 IST" duration-ms="3123" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForEnabledLoginButton_TestCase7()[pri:7, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:22:00 IST" name="verifyForEnabledLoginButton_TestCase7" finished-at="2024-06-24T18:22:02 IST" duration-ms="2300" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForEnabledLoginButton_TestCase7 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:22:02 IST" name="tearDown" finished-at="2024-06-24T18:22:03 IST" duration-ms="241" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:22:08 IST" name="initialize" finished-at="2024-06-24T18:22:11 IST" duration-ms="2714" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsername_TestCase8()[pri:8, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:22:11 IST" name="verifyForDisabledLoginButtonForEmptyUsername_TestCase8" finished-at="2024-06-24T18:22:11 IST" duration-ms="290" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsername_TestCase8 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:22:11 IST" name="tearDown" finished-at="2024-06-24T18:22:12 IST" duration-ms="181" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:22:12 IST" name="initialize" finished-at="2024-06-24T18:22:14 IST" duration-ms="2795" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyPassword_TestCase9()[pri:9, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:22:14 IST" name="verifyForDisabledLoginButtonForEmptyPassword_TestCase9" finished-at="2024-06-24T18:22:15 IST" duration-ms="302" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyPassword_TestCase9 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:22:15 IST" name="tearDown" finished-at="2024-06-24T18:22:15 IST" duration-ms="169" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:22:15 IST" name="initialize" finished-at="2024-06-24T18:22:18 IST" duration-ms="2601" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10()[pri:10, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:22:18 IST" name="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10" finished-at="2024-06-24T18:22:18 IST" duration-ms="236" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-24T18:22:18 IST" name="tearDown" finished-at="2024-06-24T18:22:18 IST" duration-ms="178" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases -->
      <class name="zapcg.Capillary.LoginTestCases.Login_Valid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@72f926e6]" started-at="2024-06-24T18:18:48 IST" name="initialize" finished-at="2024-06-24T18:18:50 IST" duration-ms="2588" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testValidLogin_TestCase1()[pri:1, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@72f926e6]" started-at="2024-06-24T18:18:50 IST" name="testValidLogin_TestCase1" finished-at="2024-06-24T18:18:53 IST" duration-ms="2900" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLogin_TestCase1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@72f926e6]" started-at="2024-06-24T18:18:53 IST" name="tearDown" finished-at="2024-06-24T18:18:53 IST" duration-ms="100" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Valid_TestCases -->
      <class name="zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:18:40 IST" name="initialize" finished-at="2024-06-24T18:18:45 IST" duration-ms="4919" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="chooseValidLocationForNewUser()[pri:1, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:18:45 IST" name="chooseValidLocationForNewUser" finished-at="2024-06-24T18:18:48 IST" duration-ms="2929" status="FAIL">
          <exception class="org.openqa.selenium.ElementClickInterceptedException">
            <message>
              <![CDATA[element click intercepted: Element <button class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary css-y7km40" tabindex="0" type="button" data-testid="LS014B" id="LS014B">...</button> is not clickable at point (383, 193). Other element would receive the click: <li tabindex="-1" role="option" id="LS013OP1" data-option-index="1" aria-disabled="false" aria-selected="false" class="MuiAutocomplete-option" data-testid="LS013OP1">...</li>
  (Session info: chrome=126.0.6478.62)
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [e8ec341d0b7b3915aeb92665802ef310, clickElement {id=f.BF31A2FF7DCAE90896D1462179C7BA52.d.05633133EBAA860781206BD2C631E6E5.e.53}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:49703}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:49703/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Element: [[ChromeDriver: chrome on windows (e8ec341d0b7b3915aeb92665802ef310)] -> xpath: //button[@id='LS014B']]
Session ID: e8ec341d0b7b3915aeb92665802ef310]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.ElementClickInterceptedException: element click intercepted: Element <button class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary css-y7km40" tabindex="0" type="button" data-testid="LS014B" id="LS014B">...</button> is not clickable at point (383, 193). Other element would receive the click: <li tabindex="-1" role="option" id="LS013OP1" data-option-index="1" aria-disabled="false" aria-selected="false" class="MuiAutocomplete-option" data-testid="LS013OP1">...</li>
  (Session info: chrome=126.0.6478.62)
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [e8ec341d0b7b3915aeb92665802ef310, clickElement {id=f.BF31A2FF7DCAE90896D1462179C7BA52.d.05633133EBAA860781206BD2C631E6E5.e.53}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:49703}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:49703/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Element: [[ChromeDriver: chrome on windows (e8ec341d0b7b3915aeb92665802ef310)] -> xpath: //button[@id='LS014B']]
Session ID: e8ec341d0b7b3915aeb92665802ef310
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:223)
at org.openqa.selenium.remote.RemoteWebElement.click(RemoteWebElement.java:76)
at jdk.internal.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:51)
at jdk.proxy2/jdk.proxy2.$Proxy10.click(Unknown Source)
at zapcg.Capillary.PageObject.locationSelectionPage.clickOnChooseLocationButton(locationSelectionPage.java:149)
at zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases.chooseValidLocationForNewUser(Location_ExistingUser_TestCases.java:53)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.ElementClickInterceptedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chooseValidLocationForNewUser -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:18:48 IST" name="tearDown" finished-at="2024-06-24T18:18:48 IST" duration-ms="148" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:19:57 IST" name="initialize" finished-at="2024-06-24T18:20:04 IST" duration-ms="6869" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyDropDownAvailability()[pri:2, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:20:04 IST" name="verifyDropDownAvailability" finished-at="2024-06-24T18:20:04 IST" duration-ms="108" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDropDownAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:20:04 IST" name="tearDown" finished-at="2024-06-24T18:20:04 IST" duration-ms="225" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:21:08 IST" name="initialize" finished-at="2024-06-24T18:21:14 IST" duration-ms="6538" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyIfAbleToSelectOptionFromDropDown()[pri:3, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:21:14 IST" name="verifyIfAbleToSelectOptionFromDropDown" finished-at="2024-06-24T18:21:15 IST" duration-ms="366" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyIfAbleToSelectOptionFromDropDown -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:21:15 IST" name="tearDown" finished-at="2024-06-24T18:21:15 IST" duration-ms="188" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:21:18 IST" name="initialize" finished-at="2024-06-24T18:21:24 IST" duration-ms="5288" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyChooseLocationButtonAvailability()[pri:4, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:21:24 IST" name="verifyChooseLocationButtonAvailability" finished-at="2024-06-24T18:21:26 IST" duration-ms="2416" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyChooseLocationButtonAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:21:26 IST" name="tearDown" finished-at="2024-06-24T18:21:26 IST" duration-ms="325" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:21:30 IST" name="initialize" finished-at="2024-06-24T18:21:37 IST" duration-ms="6888" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyHeaderOfMemberLookupScreen()[pri:5, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:21:37 IST" name="verifyHeaderOfMemberLookupScreen" finished-at="2024-06-24T18:21:40 IST" duration-ms="3178" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[An error occurred while verifying the dropdown selections: element click intercepted: Element <button class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary css-y7km40" tabindex="0" type="button" data-testid="LS014B" id="LS014B">...</button> is not clickable at point (383, 193). Other element would receive the click: <li tabindex="-1" role="option" id="LS013OP1" data-option-index="1" aria-disabled="false" aria-selected="false" class="MuiAutocomplete-option" data-testid="LS013OP1">...</li>
  (Session info: chrome=126.0.6478.62)
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [6f00c7c9e3657aaff6b2f7879a4a015b, clickElement {id=f.86C1E78ECB6A67DE57DA53A205D2D56C.d.5D09F1E3DD79D10733CC5446407832AA.e.55}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:49981}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:49981/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Element: [[ChromeDriver: chrome on windows (6f00c7c9e3657aaff6b2f7879a4a015b)] -> xpath: //button[@id='LS014B']]
Session ID: 6f00c7c9e3657aaff6b2f7879a4a015b]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: An error occurred while verifying the dropdown selections: element click intercepted: Element <button class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary css-y7km40" tabindex="0" type="button" data-testid="LS014B" id="LS014B">...</button> is not clickable at point (383, 193). Other element would receive the click: <li tabindex="-1" role="option" id="LS013OP1" data-option-index="1" aria-disabled="false" aria-selected="false" class="MuiAutocomplete-option" data-testid="LS013OP1">...</li>
  (Session info: chrome=126.0.6478.62)
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [6f00c7c9e3657aaff6b2f7879a4a015b, clickElement {id=f.86C1E78ECB6A67DE57DA53A205D2D56C.d.5D09F1E3DD79D10733CC5446407832AA.e.55}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.63 (df799988fdc9..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:49981}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:49981/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Element: [[ChromeDriver: chrome on windows (6f00c7c9e3657aaff6b2f7879a4a015b)] -> xpath: //button[@id='LS014B']]
Session ID: 6f00c7c9e3657aaff6b2f7879a4a015b
at org.testng.Assert.fail(Assert.java:111)
at zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases.verifyHeaderOfMemberLookupScreen(Location_ExistingUser_TestCases.java:150)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyHeaderOfMemberLookupScreen -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:21:40 IST" name="tearDown" finished-at="2024-06-24T18:21:40 IST" duration-ms="197" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:21:40 IST" name="initialize" finished-at="2024-06-24T18:21:46 IST" duration-ms="5801" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLookupNavigation()[pri:6, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:21:46 IST" name="burgerIconMemberLookupNavigation" finished-at="2024-06-24T18:21:47 IST" duration-ms="271" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLookupNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:21:47 IST" name="tearDown" finished-at="2024-06-24T18:21:47 IST" duration-ms="178" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:21:50 IST" name="initialize" finished-at="2024-06-24T18:21:56 IST" duration-ms="6153" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLocationNavigation()[pri:7, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:21:56 IST" name="burgerIconMemberLocationNavigation" finished-at="2024-06-24T18:21:57 IST" duration-ms="286" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLocationNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:21:57 IST" name="tearDown" finished-at="2024-06-24T18:21:57 IST" duration-ms="259" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:22:03 IST" name="initialize" finished-at="2024-06-24T18:22:08 IST" duration-ms="5504" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconLogout()[pri:8, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:22:08 IST" name="burgerIconLogout" finished-at="2024-06-24T18:22:08 IST" duration-ms="206" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconLogout -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-24T18:22:08 IST" name="tearDown" finished-at="2024-06-24T18:22:08 IST" duration-ms="174" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases -->
    </test> <!-- LoginTestsChromeBrowserGalaxyS20Landscape -->
  </suite> <!-- TestSuite -->
</testng-results>
