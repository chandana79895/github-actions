name: Build and Deploy

on:
  push:
    # types: [opened, synchronize, reopened, closed]
    branches:
      - latest-code

jobs:
  unit_tests:
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.action == 'reopened')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.x'

      - name: Unit-tests
        run: |
          npm i
          npm run test 

  deploy:
    runs-on: ubuntu-latest
    # if: github.event_name == 'push' && (github.ref == 'refs/heads/poc') || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'develop')
    environment:
      name: poc
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-duration-seconds: 1200
          audience: sts.amazonaws.com

      - name: Set up .env file
        env:
          VITE_APP_SESSION: ${{ secrets.VITE_APP_SESSION }}
          VITE_APP_BASE_URL: ${{ secrets.VITE_APP_BASE_URL }}
        run: |
          echo "VITE_APP_SESSION=${{ secrets.VITE_APP_SESSION }}" >> .env.${{ secrets.ENV }} 
          echo "VITE_APP_BASE_URL=${{ secrets.VITE_APP_BASE_URL }}" >> .env.${{ secrets.ENV }} 

      - name: Deploying distribution
        env:
          ENV: ${{ secrets.ENV }}
          VITE_APP_SESSION: ${{ secrets.VITE_APP_SESSION }}
          VITE_APP_BASE_URL: ${{ secrets.VITE_APP_BASE_URL }}
        run: |
          aws cloudformation validate-template --template-body file://portal.yml
          aws cloudformation deploy --stack-name test-stack-ui-${{ secrets.ENV }} --template-file portal.yml --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM --parameter-overrides Env=${{ secrets.ENV }}
      
  build-and-run-jar:
    runs-on: ubuntu-latest
    environment:
      name: poc
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Build with Maven
      run: mvn clean package

    - name: Run JAR file
      run: java -jar Capillary_Framework-0.0.1-SNAPSHOT.jar

      # - name: Build and Deploying FE Code
      #   env:
      #     CFD_ID: ${{ secrets.CFD_ID }}
      #   run: |
      #     # printenv >  .env.${{ secrets.ENV }}
      #     npm install
      #     export CI=false
      #     npm run build:${{ secrets.ENV }}
      #     cat .env.${{ secrets.ENV }}
      #     aws s3 rm s3://test-stack-ui-${{ secrets.ENV }}/ --recursive
      #     aws s3 sync ./dist s3://test-stack-ui-${{ secrets.ENV}}/
      #     aws cloudfront create-invalidation --distribution-id ${{ secrets.CFD_ID }} --paths "/*"

  # notify_on_success:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   environment:
  #     name: poc
  #   if: success()
  #   steps:
  #     - name: Notify Slack for pipeline success
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #         REPO_NAME: ${{ secrets.REPO_NAME }}
  #         ENVIRONMENT: ${{ secrets.ENV }}  
  #         REPO_SLUG: ${{ secrets.REPO_SLUG }}
  #       run: |
  #         curl -X POST -H 'Content-type: application/json' --data '{
  #           "text": "GitHub Pipeline Status Notification",
  #           "attachments": [
  #             {
  #               "fields": [
  #                 {
  #                   "title": "Repository",
  #                   "value": "'${REPO_NAME}'"
  #                 },
  #                 {
  #                   "title": "Environment",
  #                   "value": "'${ENVIRONMENT}'"
  #                 },
  #                 {
  #                   "title": "Status",
  #                   "value": "SUCCESS",
  #                   "color": "00FF00"
  #                 },
  #                 {
  #                   "title": "Pipeline URL",
  #                   "value": "https://github.com/${{ secrets.REPO_SLUG }}/${{ secrets.REPO_NAME }}/actions/runs/${{ github.run_id }}"
  #                 },
  #                 {
  #                   "title": "Branch",
  #                   "value": "${{ github.ref }}"
  #                 }
  #               ]
  #             }
  #           ]
  #         }' $SLACK_WEBHOOK_URL

  # notify_on_failure:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   environment:
  #     name: poc
  #   if: failure()
  #   steps:
  #     - name: Notify Slack for pipeline failure
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #         REPO_NAME: ${{ secrets.REPO_NAME }}
  #         ENVIRONMENT: ${{ secrets.ENV }} 
  #         REPO_SLUG: ${{ secrets.REPO_SLUG }}
  #       run: |
  #         curl -X POST -H 'Content-type: application/json' --data '{
  #           "text": "GitHub Pipeline Status Notification",
  #           "attachments": [
  #             {
  #               "fields": [
  #                 {
  #                   "title": "Repository",
  #                   "value": "'${REPO_NAME}'"
  #                 },
  #                 {
  #                   "title": "Environment",
  #                   "value": "'${ENVIRONMENT}'"
  #                 },
  #                 {
  #                   "title": "Status",
  #                   "value": "FAILED",
  #                   "color": "#FF0000"
  #                 },
  #                 {
  #                   "title": "Pipeline URL",
  #                   "value": "https://github.com/${{ secrets.REPO_SLUG }}/${{ secrets.REPO_NAME }}/actions/runs/${{ github.run_id }}"
  #                 },
  #                 {
  #                   "title": "Branch",
  #                   "value": "${{ github.ref }}"
  #                 }
  #               ]
  #             }
  #           ]
  #         }' $SLACK_WEBHOOK_URL

  # delete-branch:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'develop'
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Delete branch
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  #       run: |
  #         branch=${{ github.event.pull_request.head.ref }}
  #         if [[ "$branch" != feature/* ]] && [[ "$branch" != feat/* ]]; then
  #           git remote set-url origin https://x-access-token:${ACCESS_TOKEN}@github.com/${{ github.repository }}
  #           git push origin --delete $branch
  #         fi
