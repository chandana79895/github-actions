name: Build and Deploy

on:
  push:
    branches:
      - feature/test-purpose

jobs:
  deployment:
    runs-on: ubuntu-latest
    environment: 
      name: poc
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'

      - name: Install dependencies and build
        run: |
          npm install
          # cd fortress-store-portal-ui/
          export CI=false
          npm run build

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-duration-seconds: 1200
          audience: sts.amazonaws.com  

      - name: Deploying distribution
        run: |
          # cd fortress-store-portal-ui/
          aws cloudformation validate-template --template-body file://portal.yml
          aws cloudformation deploy --stack-name fortress-stack-ui-${{ secrets.ENV }} --template-file portal.yml --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM --parameter-overrides Env=${{ secrets.ENV }}

      - name: Deploying to S3 bucket
        run: |
          # cd fortress-store-portal-ui/
          aws s3 rm s3://fortress-stack-ui-${{ secrets.ENV }}/ --recursive
          aws s3 sync ./dist s3://fortress-stack-ui-${{ secrets.ENV}}/
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CFD_ID }} --paths "/*"

      - name: Notify Slack
        if: always()  # Ensure notification is sent even if a previous step failed
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "Deployment to poc completed successfully!"
          }' $SLACK_WEBHOOK_URL    
