<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="108" passed="93" failed="15" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-06-25T16:06:46 IST" name="TestSuite" finished-at="2024-06-25T16:28:42 IST" duration-ms="1315734">
    <groups>
    </groups>
    <test started-at="2024-06-25T16:06:46 IST" name="LoginTestsChromeBrowserTabletPortrait" finished-at="2024-06-25T16:10:29 IST" duration-ms="222283">
      <class name="zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:07:08 IST" name="initialize" finished-at="2024-06-25T16:07:11 IST" duration-ms="3136" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidUsername_TestCase2()[pri:2, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:07:11 IST" name="testInvalidUsername_TestCase2" finished-at="2024-06-25T16:08:12 IST" duration-ms="60352" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidUserNameError(loginPage.java:154)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidUsername_TestCase2(Login_Invalid_TestCases.java:36)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[contains(text(),'Invalid username or password. Try again.')]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [73de644def708b1444c89ca6b402ccd5, findElement {using=xpath, value=//h6[contains(text(),'Invalid username or password. Try again.')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:55233}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:55233/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 73de644def708b1444c89ca6b402ccd5
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidUsername_TestCase2 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:08:12 IST" name="tearDown" finished-at="2024-06-25T16:08:12 IST" duration-ms="138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:08:18 IST" name="initialize" finished-at="2024-06-25T16:08:21 IST" duration-ms="3535" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidPassword_TestCase3()[pri:3, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:08:21 IST" name="testInvalidPassword_TestCase3" finished-at="2024-06-25T16:09:22 IST" duration-ms="60698" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidPasswordError(loginPage.java:185)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidPassword_TestCase3(Login_Invalid_TestCases.java:44)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [4f60bdc1e58a6a7cf9645ec325dbf56c, findElement {using=xpath, value=//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:55295}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:55295/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 4f60bdc1e58a6a7cf9645ec325dbf56c
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidPassword_TestCase3 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:09:22 IST" name="tearDown" finished-at="2024-06-25T16:09:22 IST" duration-ms="101" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:09:28 IST" name="initialize" finished-at="2024-06-25T16:09:31 IST" duration-ms="2853" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testTooLongUsername_TestCase4()[pri:4, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:09:31 IST" name="testTooLongUsername_TestCase4" finished-at="2024-06-25T16:09:32 IST" duration-ms="617" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTooLongUsername_TestCase4 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:09:32 IST" name="tearDown" finished-at="2024-06-25T16:09:33 IST" duration-ms="1703" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:09:41 IST" name="initialize" finished-at="2024-06-25T16:09:44 IST" duration-ms="2868" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testMinLengthPassword_TestCase5()[pri:5, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:09:44 IST" name="testMinLengthPassword_TestCase5" finished-at="2024-06-25T16:09:44 IST" duration-ms="370" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMinLengthPassword_TestCase5 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:09:44 IST" name="tearDown" finished-at="2024-06-25T16:09:44 IST" duration-ms="205" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:09:58 IST" name="initialize" finished-at="2024-06-25T16:10:01 IST" duration-ms="2900" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testUsernameWithSpaces_TestCase6()[pri:6, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:10:01 IST" name="testUsernameWithSpaces_TestCase6" finished-at="2024-06-25T16:10:01 IST" duration-ms="352" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUsernameWithSpaces_TestCase6 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:10:01 IST" name="tearDown" finished-at="2024-06-25T16:10:01 IST" duration-ms="203" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:10:07 IST" name="initialize" finished-at="2024-06-25T16:10:10 IST" duration-ms="2933" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForEnabledLoginButton_TestCase7()[pri:7, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:10:10 IST" name="verifyForEnabledLoginButton_TestCase7" finished-at="2024-06-25T16:10:13 IST" duration-ms="2526" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForEnabledLoginButton_TestCase7 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:10:13 IST" name="tearDown" finished-at="2024-06-25T16:10:13 IST" duration-ms="246" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:10:19 IST" name="initialize" finished-at="2024-06-25T16:10:22 IST" duration-ms="3015" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsername_TestCase8()[pri:8, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:10:22 IST" name="verifyForDisabledLoginButtonForEmptyUsername_TestCase8" finished-at="2024-06-25T16:10:22 IST" duration-ms="170" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsername_TestCase8 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:10:22 IST" name="tearDown" finished-at="2024-06-25T16:10:22 IST" duration-ms="147" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:10:22 IST" name="initialize" finished-at="2024-06-25T16:10:25 IST" duration-ms="2990" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyPassword_TestCase9()[pri:9, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:10:25 IST" name="verifyForDisabledLoginButtonForEmptyPassword_TestCase9" finished-at="2024-06-25T16:10:25 IST" duration-ms="192" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyPassword_TestCase9 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:10:25 IST" name="tearDown" finished-at="2024-06-25T16:10:25 IST" duration-ms="368" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:10:25 IST" name="initialize" finished-at="2024-06-25T16:10:28 IST" duration-ms="2865" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10()[pri:10, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:10:28 IST" name="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10" finished-at="2024-06-25T16:10:28 IST" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@36c88a32]" started-at="2024-06-25T16:10:28 IST" name="tearDown" finished-at="2024-06-25T16:10:29 IST" duration-ms="139" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases -->
      <class name="zapcg.Capillary.LoginTestCases.Login_Valid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@5dd6264]" started-at="2024-06-25T16:07:03 IST" name="initialize" finished-at="2024-06-25T16:07:05 IST" duration-ms="2849" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testValidLogin_TestCase1()[pri:1, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@5dd6264]" started-at="2024-06-25T16:07:05 IST" name="testValidLogin_TestCase1" finished-at="2024-06-25T16:07:08 IST" duration-ms="2485" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLogin_TestCase1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@5dd6264]" started-at="2024-06-25T16:07:08 IST" name="tearDown" finished-at="2024-06-25T16:07:08 IST" duration-ms="93" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Valid_TestCases -->
      <class name="zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:06:46 IST" name="initialize" finished-at="2024-06-25T16:06:57 IST" duration-ms="10722" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="chooseValidLocationForNewUser()[pri:1, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:06:57 IST" name="chooseValidLocationForNewUser" finished-at="2024-06-25T16:07:02 IST" duration-ms="5330" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chooseValidLocationForNewUser -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:07:02 IST" name="tearDown" finished-at="2024-06-25T16:07:03 IST" duration-ms="162" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:08:12 IST" name="initialize" finished-at="2024-06-25T16:08:18 IST" duration-ms="5951" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyDropDownAvailability()[pri:2, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:08:18 IST" name="verifyDropDownAvailability" finished-at="2024-06-25T16:08:18 IST" duration-ms="80" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDropDownAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:08:18 IST" name="tearDown" finished-at="2024-06-25T16:08:18 IST" duration-ms="147" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:09:22 IST" name="initialize" finished-at="2024-06-25T16:09:28 IST" duration-ms="5492" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyIfAbleToSelectOptionFromDropDown()[pri:3, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:09:28 IST" name="verifyIfAbleToSelectOptionFromDropDown" finished-at="2024-06-25T16:09:28 IST" duration-ms="239" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyIfAbleToSelectOptionFromDropDown -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:09:28 IST" name="tearDown" finished-at="2024-06-25T16:09:28 IST" duration-ms="166" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:09:33 IST" name="initialize" finished-at="2024-06-25T16:09:38 IST" duration-ms="5146" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyChooseLocationButtonAvailability()[pri:4, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:09:38 IST" name="verifyChooseLocationButtonAvailability" finished-at="2024-06-25T16:09:41 IST" duration-ms="2275" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyChooseLocationButtonAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:09:41 IST" name="tearDown" finished-at="2024-06-25T16:09:41 IST" duration-ms="128" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:09:44 IST" name="initialize" finished-at="2024-06-25T16:09:50 IST" duration-ms="5403" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyHeaderOfMemberLookupScreen()[pri:5, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:09:50 IST" name="verifyHeaderOfMemberLookupScreen" finished-at="2024-06-25T16:09:52 IST" duration-ms="2028" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyHeaderOfMemberLookupScreen -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:09:52 IST" name="tearDown" finished-at="2024-06-25T16:09:52 IST" duration-ms="177" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:09:52 IST" name="initialize" finished-at="2024-06-25T16:09:57 IST" duration-ms="5332" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLookupNavigation()[pri:6, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:09:57 IST" name="burgerIconMemberLookupNavigation" finished-at="2024-06-25T16:09:57 IST" duration-ms="134" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLookupNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:09:57 IST" name="tearDown" finished-at="2024-06-25T16:09:58 IST" duration-ms="372" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:10:01 IST" name="initialize" finished-at="2024-06-25T16:10:07 IST" duration-ms="5595" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLocationNavigation()[pri:7, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:10:07 IST" name="burgerIconMemberLocationNavigation" finished-at="2024-06-25T16:10:07 IST" duration-ms="130" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLocationNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:10:07 IST" name="tearDown" finished-at="2024-06-25T16:10:07 IST" duration-ms="326" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:10:13 IST" name="initialize" finished-at="2024-06-25T16:10:18 IST" duration-ms="5274" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconLogout()[pri:8, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:10:18 IST" name="burgerIconLogout" finished-at="2024-06-25T16:10:18 IST" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconLogout -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@7880cdf3]" started-at="2024-06-25T16:10:18 IST" name="tearDown" finished-at="2024-06-25T16:10:19 IST" duration-ms="263" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases -->
    </test> <!-- LoginTestsChromeBrowserTabletPortrait -->
    <test started-at="2024-06-25T16:10:29 IST" name="LoginTestsChromeBrowserTabletLandscape" finished-at="2024-06-25T16:13:52 IST" duration-ms="202987">
      <class name="zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:10:41 IST" name="initialize" finished-at="2024-06-25T16:10:44 IST" duration-ms="2660" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidUsername_TestCase2()[pri:2, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:10:44 IST" name="testInvalidUsername_TestCase2" finished-at="2024-06-25T16:11:44 IST" duration-ms="60431" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidUserNameError(loginPage.java:154)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidUsername_TestCase2(Login_Invalid_TestCases.java:36)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[contains(text(),'Invalid username or password. Try again.')]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [8d8bf45fb76a9929d0dd4d62a13036c2, findElement {using=xpath, value=//h6[contains(text(),'Invalid username or password. Try again.')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:55652}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:55652/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 8d8bf45fb76a9929d0dd4d62a13036c2
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidUsername_TestCase2 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:11:44 IST" name="tearDown" finished-at="2024-06-25T16:11:45 IST" duration-ms="168" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:11:50 IST" name="initialize" finished-at="2024-06-25T16:11:52 IST" duration-ms="2413" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidPassword_TestCase3()[pri:3, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:11:52 IST" name="testInvalidPassword_TestCase3" finished-at="2024-06-25T16:12:53 IST" duration-ms="60300" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidPasswordError(loginPage.java:185)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidPassword_TestCase3(Login_Invalid_TestCases.java:44)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [ff60b3c726fff87fce30ff971a159d96, findElement {using=xpath, value=//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:55698}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:55698/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: ff60b3c726fff87fce30ff971a159d96
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidPassword_TestCase3 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:12:53 IST" name="tearDown" finished-at="2024-06-25T16:12:53 IST" duration-ms="194" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:12:58 IST" name="initialize" finished-at="2024-06-25T16:13:01 IST" duration-ms="2433" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testTooLongUsername_TestCase4()[pri:4, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:01 IST" name="testTooLongUsername_TestCase4" finished-at="2024-06-25T16:13:01 IST" duration-ms="485" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTooLongUsername_TestCase4 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:01 IST" name="tearDown" finished-at="2024-06-25T16:13:01 IST" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:09 IST" name="initialize" finished-at="2024-06-25T16:13:11 IST" duration-ms="2446" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testMinLengthPassword_TestCase5()[pri:5, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:11 IST" name="testMinLengthPassword_TestCase5" finished-at="2024-06-25T16:13:12 IST" duration-ms="337" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMinLengthPassword_TestCase5 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:12 IST" name="tearDown" finished-at="2024-06-25T16:13:12 IST" duration-ms="149" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:24 IST" name="initialize" finished-at="2024-06-25T16:13:27 IST" duration-ms="2400" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testUsernameWithSpaces_TestCase6()[pri:6, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:27 IST" name="testUsernameWithSpaces_TestCase6" finished-at="2024-06-25T16:13:27 IST" duration-ms="354" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUsernameWithSpaces_TestCase6 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:27 IST" name="tearDown" finished-at="2024-06-25T16:13:27 IST" duration-ms="152" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:33 IST" name="initialize" finished-at="2024-06-25T16:13:35 IST" duration-ms="2551" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForEnabledLoginButton_TestCase7()[pri:7, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:35 IST" name="verifyForEnabledLoginButton_TestCase7" finished-at="2024-06-25T16:13:38 IST" duration-ms="2533" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForEnabledLoginButton_TestCase7 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:38 IST" name="tearDown" finished-at="2024-06-25T16:13:38 IST" duration-ms="166" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:43 IST" name="initialize" finished-at="2024-06-25T16:13:45 IST" duration-ms="2456" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsername_TestCase8()[pri:8, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:45 IST" name="verifyForDisabledLoginButtonForEmptyUsername_TestCase8" finished-at="2024-06-25T16:13:45 IST" duration-ms="170" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsername_TestCase8 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:45 IST" name="tearDown" finished-at="2024-06-25T16:13:45 IST" duration-ms="165" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:45 IST" name="initialize" finished-at="2024-06-25T16:13:48 IST" duration-ms="2772" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyPassword_TestCase9()[pri:9, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:48 IST" name="verifyForDisabledLoginButtonForEmptyPassword_TestCase9" finished-at="2024-06-25T16:13:48 IST" duration-ms="227" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyPassword_TestCase9 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:48 IST" name="tearDown" finished-at="2024-06-25T16:13:49 IST" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:49 IST" name="initialize" finished-at="2024-06-25T16:13:51 IST" duration-ms="2571" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10()[pri:10, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:51 IST" name="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10" finished-at="2024-06-25T16:13:51 IST" duration-ms="181" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@636be97c]" started-at="2024-06-25T16:13:51 IST" name="tearDown" finished-at="2024-06-25T16:13:52 IST" duration-ms="275" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases -->
      <class name="zapcg.Capillary.LoginTestCases.Login_Valid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@3f197a46]" started-at="2024-06-25T16:10:36 IST" name="initialize" finished-at="2024-06-25T16:10:39 IST" duration-ms="2517" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testValidLogin_TestCase1()[pri:1, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@3f197a46]" started-at="2024-06-25T16:10:39 IST" name="testValidLogin_TestCase1" finished-at="2024-06-25T16:10:41 IST" duration-ms="2593" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLogin_TestCase1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@3f197a46]" started-at="2024-06-25T16:10:41 IST" name="tearDown" finished-at="2024-06-25T16:10:41 IST" duration-ms="80" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Valid_TestCases -->
      <class name="zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:10:29 IST" name="initialize" finished-at="2024-06-25T16:10:34 IST" duration-ms="5390" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="chooseValidLocationForNewUser()[pri:1, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:10:34 IST" name="chooseValidLocationForNewUser" finished-at="2024-06-25T16:10:36 IST" duration-ms="1914" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chooseValidLocationForNewUser -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:10:36 IST" name="tearDown" finished-at="2024-06-25T16:10:36 IST" duration-ms="174" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:11:45 IST" name="initialize" finished-at="2024-06-25T16:11:50 IST" duration-ms="4950" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyDropDownAvailability()[pri:2, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:11:50 IST" name="verifyDropDownAvailability" finished-at="2024-06-25T16:11:50 IST" duration-ms="52" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDropDownAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:11:50 IST" name="tearDown" finished-at="2024-06-25T16:11:50 IST" duration-ms="248" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:12:53 IST" name="initialize" finished-at="2024-06-25T16:12:58 IST" duration-ms="5211" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyIfAbleToSelectOptionFromDropDown()[pri:3, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:12:58 IST" name="verifyIfAbleToSelectOptionFromDropDown" finished-at="2024-06-25T16:12:58 IST" duration-ms="178" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyIfAbleToSelectOptionFromDropDown -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:12:58 IST" name="tearDown" finished-at="2024-06-25T16:12:58 IST" duration-ms="182" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:13:01 IST" name="initialize" finished-at="2024-06-25T16:13:06 IST" duration-ms="5088" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyChooseLocationButtonAvailability()[pri:4, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:13:06 IST" name="verifyChooseLocationButtonAvailability" finished-at="2024-06-25T16:13:09 IST" duration-ms="2281" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyChooseLocationButtonAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:13:09 IST" name="tearDown" finished-at="2024-06-25T16:13:09 IST" duration-ms="184" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:13:12 IST" name="initialize" finished-at="2024-06-25T16:13:17 IST" duration-ms="5140" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyHeaderOfMemberLookupScreen()[pri:5, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:13:17 IST" name="verifyHeaderOfMemberLookupScreen" finished-at="2024-06-25T16:13:19 IST" duration-ms="1994" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyHeaderOfMemberLookupScreen -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:13:19 IST" name="tearDown" finished-at="2024-06-25T16:13:19 IST" duration-ms="199" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:13:19 IST" name="initialize" finished-at="2024-06-25T16:13:24 IST" duration-ms="5003" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLookupNavigation()[pri:6, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:13:24 IST" name="burgerIconMemberLookupNavigation" finished-at="2024-06-25T16:13:24 IST" duration-ms="114" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLookupNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:13:24 IST" name="tearDown" finished-at="2024-06-25T16:13:24 IST" duration-ms="160" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:13:27 IST" name="initialize" finished-at="2024-06-25T16:13:32 IST" duration-ms="4881" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLocationNavigation()[pri:7, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:13:32 IST" name="burgerIconMemberLocationNavigation" finished-at="2024-06-25T16:13:32 IST" duration-ms="115" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLocationNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:13:32 IST" name="tearDown" finished-at="2024-06-25T16:13:33 IST" duration-ms="166" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:13:38 IST" name="initialize" finished-at="2024-06-25T16:13:42 IST" duration-ms="4477" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tablet Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconLogout()[pri:8, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:13:42 IST" name="burgerIconLogout" finished-at="2024-06-25T16:13:42 IST" duration-ms="127" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconLogout -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@50a638b5]" started-at="2024-06-25T16:13:42 IST" name="tearDown" finished-at="2024-06-25T16:13:43 IST" duration-ms="279" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases -->
    </test> <!-- LoginTestsChromeBrowserTabletLandscape -->
    <test started-at="2024-06-25T16:13:52 IST" name="LoginTestsChromeBrowseriPhone11ProPortrait" finished-at="2024-06-25T16:17:20 IST" duration-ms="208630">
      <class name="zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:14:05 IST" name="initialize" finished-at="2024-06-25T16:14:08 IST" duration-ms="2751" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidUsername_TestCase2()[pri:2, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:14:08 IST" name="testInvalidUsername_TestCase2" finished-at="2024-06-25T16:15:08 IST" duration-ms="60394" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidUserNameError(loginPage.java:154)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidUsername_TestCase2(Login_Invalid_TestCases.java:36)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[contains(text(),'Invalid username or password. Try again.')]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [2f5f2891d5f0aca929000f28c8f70143, findElement {using=xpath, value=//h6[contains(text(),'Invalid username or password. Try again.')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:56035}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:56035/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 2f5f2891d5f0aca929000f28c8f70143
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidUsername_TestCase2 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:15:08 IST" name="tearDown" finished-at="2024-06-25T16:15:08 IST" duration-ms="199" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:15:15 IST" name="initialize" finished-at="2024-06-25T16:15:17 IST" duration-ms="2671" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidPassword_TestCase3()[pri:3, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:15:17 IST" name="testInvalidPassword_TestCase3" finished-at="2024-06-25T16:16:18 IST" duration-ms="60383" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidPasswordError(loginPage.java:185)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidPassword_TestCase3(Login_Invalid_TestCases.java:44)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [cc16d9cc819ff1e2d08b97013eb42ed1, findElement {using=xpath, value=//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:56091}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:56091/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: cc16d9cc819ff1e2d08b97013eb42ed1
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidPassword_TestCase3 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:16:18 IST" name="tearDown" finished-at="2024-06-25T16:16:18 IST" duration-ms="205" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:16:24 IST" name="initialize" finished-at="2024-06-25T16:16:26 IST" duration-ms="2737" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testTooLongUsername_TestCase4()[pri:4, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:16:26 IST" name="testTooLongUsername_TestCase4" finished-at="2024-06-25T16:16:27 IST" duration-ms="473" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTooLongUsername_TestCase4 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:16:27 IST" name="tearDown" finished-at="2024-06-25T16:16:27 IST" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:16:35 IST" name="initialize" finished-at="2024-06-25T16:16:38 IST" duration-ms="2872" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testMinLengthPassword_TestCase5()[pri:5, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:16:38 IST" name="testMinLengthPassword_TestCase5" finished-at="2024-06-25T16:16:38 IST" duration-ms="330" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMinLengthPassword_TestCase5 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:16:38 IST" name="tearDown" finished-at="2024-06-25T16:16:38 IST" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:16:51 IST" name="initialize" finished-at="2024-06-25T16:16:54 IST" duration-ms="2771" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testUsernameWithSpaces_TestCase6()[pri:6, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:16:54 IST" name="testUsernameWithSpaces_TestCase6" finished-at="2024-06-25T16:16:54 IST" duration-ms="311" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUsernameWithSpaces_TestCase6 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:16:54 IST" name="tearDown" finished-at="2024-06-25T16:16:54 IST" duration-ms="132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:17:00 IST" name="initialize" finished-at="2024-06-25T16:17:03 IST" duration-ms="2714" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForEnabledLoginButton_TestCase7()[pri:7, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:17:03 IST" name="verifyForEnabledLoginButton_TestCase7" finished-at="2024-06-25T16:17:05 IST" duration-ms="2512" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForEnabledLoginButton_TestCase7 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:17:05 IST" name="tearDown" finished-at="2024-06-25T16:17:05 IST" duration-ms="159" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:17:11 IST" name="initialize" finished-at="2024-06-25T16:17:14 IST" duration-ms="2706" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsername_TestCase8()[pri:8, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:17:14 IST" name="verifyForDisabledLoginButtonForEmptyUsername_TestCase8" finished-at="2024-06-25T16:17:14 IST" duration-ms="167" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsername_TestCase8 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:17:14 IST" name="tearDown" finished-at="2024-06-25T16:17:14 IST" duration-ms="140" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:17:14 IST" name="initialize" finished-at="2024-06-25T16:17:17 IST" duration-ms="2783" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyPassword_TestCase9()[pri:9, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:17:17 IST" name="verifyForDisabledLoginButtonForEmptyPassword_TestCase9" finished-at="2024-06-25T16:17:17 IST" duration-ms="239" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyPassword_TestCase9 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:17:17 IST" name="tearDown" finished-at="2024-06-25T16:17:17 IST" duration-ms="131" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:17:17 IST" name="initialize" finished-at="2024-06-25T16:17:20 IST" duration-ms="3039" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10()[pri:10, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:17:20 IST" name="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10" finished-at="2024-06-25T16:17:20 IST" duration-ms="144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@50b472aa]" started-at="2024-06-25T16:17:20 IST" name="tearDown" finished-at="2024-06-25T16:17:20 IST" duration-ms="162" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases -->
      <class name="zapcg.Capillary.LoginTestCases.Login_Valid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@6ca8564a]" started-at="2024-06-25T16:13:59 IST" name="initialize" finished-at="2024-06-25T16:14:02 IST" duration-ms="2798" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testValidLogin_TestCase1()[pri:1, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@6ca8564a]" started-at="2024-06-25T16:14:02 IST" name="testValidLogin_TestCase1" finished-at="2024-06-25T16:14:05 IST" duration-ms="2556" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLogin_TestCase1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@6ca8564a]" started-at="2024-06-25T16:14:05 IST" name="tearDown" finished-at="2024-06-25T16:14:05 IST" duration-ms="96" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Valid_TestCases -->
      <class name="zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:13:52 IST" name="initialize" finished-at="2024-06-25T16:13:57 IST" duration-ms="5526" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="chooseValidLocationForNewUser()[pri:1, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:13:57 IST" name="chooseValidLocationForNewUser" finished-at="2024-06-25T16:13:59 IST" duration-ms="1937" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chooseValidLocationForNewUser -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:13:59 IST" name="tearDown" finished-at="2024-06-25T16:13:59 IST" duration-ms="327" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:15:08 IST" name="initialize" finished-at="2024-06-25T16:15:14 IST" duration-ms="6010" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyDropDownAvailability()[pri:2, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:15:14 IST" name="verifyDropDownAvailability" finished-at="2024-06-25T16:15:14 IST" duration-ms="59" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDropDownAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:15:14 IST" name="tearDown" finished-at="2024-06-25T16:15:15 IST" duration-ms="182" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:16:18 IST" name="initialize" finished-at="2024-06-25T16:16:23 IST" duration-ms="5363" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyIfAbleToSelectOptionFromDropDown()[pri:3, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:16:23 IST" name="verifyIfAbleToSelectOptionFromDropDown" finished-at="2024-06-25T16:16:23 IST" duration-ms="173" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyIfAbleToSelectOptionFromDropDown -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:16:23 IST" name="tearDown" finished-at="2024-06-25T16:16:24 IST" duration-ms="176" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:16:27 IST" name="initialize" finished-at="2024-06-25T16:16:32 IST" duration-ms="5443" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyChooseLocationButtonAvailability()[pri:4, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:16:32 IST" name="verifyChooseLocationButtonAvailability" finished-at="2024-06-25T16:16:35 IST" duration-ms="2243" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyChooseLocationButtonAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:16:35 IST" name="tearDown" finished-at="2024-06-25T16:16:35 IST" duration-ms="167" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:16:38 IST" name="initialize" finished-at="2024-06-25T16:16:43 IST" duration-ms="5408" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyHeaderOfMemberLookupScreen()[pri:5, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:16:43 IST" name="verifyHeaderOfMemberLookupScreen" finished-at="2024-06-25T16:16:45 IST" duration-ms="1997" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyHeaderOfMemberLookupScreen -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:16:45 IST" name="tearDown" finished-at="2024-06-25T16:16:46 IST" duration-ms="165" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:16:46 IST" name="initialize" finished-at="2024-06-25T16:16:51 IST" duration-ms="5272" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLookupNavigation()[pri:6, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:16:51 IST" name="burgerIconMemberLookupNavigation" finished-at="2024-06-25T16:16:51 IST" duration-ms="132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLookupNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:16:51 IST" name="tearDown" finished-at="2024-06-25T16:16:51 IST" duration-ms="179" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:16:54 IST" name="initialize" finished-at="2024-06-25T16:17:00 IST" duration-ms="5171" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLocationNavigation()[pri:7, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:17:00 IST" name="burgerIconMemberLocationNavigation" finished-at="2024-06-25T16:17:00 IST" duration-ms="115" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLocationNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:17:00 IST" name="tearDown" finished-at="2024-06-25T16:17:00 IST" duration-ms="189" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:17:05 IST" name="initialize" finished-at="2024-06-25T16:17:11 IST" duration-ms="5215" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconLogout()[pri:8, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:17:11 IST" name="burgerIconLogout" finished-at="2024-06-25T16:17:11 IST" duration-ms="126" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconLogout -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31368b99]" started-at="2024-06-25T16:17:11 IST" name="tearDown" finished-at="2024-06-25T16:17:11 IST" duration-ms="167" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases -->
    </test> <!-- LoginTestsChromeBrowseriPhone11ProPortrait -->
    <test started-at="2024-06-25T16:17:20 IST" name="LoginTestsChromeBrowseriPhone11ProLandscape" finished-at="2024-06-25T16:21:10 IST" duration-ms="229197">
      <class name="zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:17:32 IST" name="initialize" finished-at="2024-06-25T16:17:34 IST" duration-ms="2437" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidUsername_TestCase2()[pri:2, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:17:34 IST" name="testInvalidUsername_TestCase2" finished-at="2024-06-25T16:18:35 IST" duration-ms="60340" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidUserNameError(loginPage.java:154)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidUsername_TestCase2(Login_Invalid_TestCases.java:36)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[contains(text(),'Invalid username or password. Try again.')]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [0358d8308ddd751cb415e69bb09eb03c, findElement {using=xpath, value=//h6[contains(text(),'Invalid username or password. Try again.')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:56422}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:56422/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 0358d8308ddd751cb415e69bb09eb03c
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidUsername_TestCase2 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:18:35 IST" name="tearDown" finished-at="2024-06-25T16:18:35 IST" duration-ms="151" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:18:39 IST" name="initialize" finished-at="2024-06-25T16:18:41 IST" duration-ms="2368" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidPassword_TestCase3()[pri:3, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:18:41 IST" name="testInvalidPassword_TestCase3" finished-at="2024-06-25T16:19:42 IST" duration-ms="60344" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidPasswordError(loginPage.java:185)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidPassword_TestCase3(Login_Invalid_TestCases.java:44)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [e929e6a6ca7288e96e346c90de5aedf2, findElement {using=xpath, value=//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:56584}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:56584/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: e929e6a6ca7288e96e346c90de5aedf2
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidPassword_TestCase3 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:19:42 IST" name="tearDown" finished-at="2024-06-25T16:19:42 IST" duration-ms="153" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:19:47 IST" name="initialize" finished-at="2024-06-25T16:19:50 IST" duration-ms="2365" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testTooLongUsername_TestCase4()[pri:4, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:19:50 IST" name="testTooLongUsername_TestCase4" finished-at="2024-06-25T16:19:50 IST" duration-ms="479" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTooLongUsername_TestCase4 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:19:50 IST" name="tearDown" finished-at="2024-06-25T16:19:50 IST" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:19:58 IST" name="initialize" finished-at="2024-06-25T16:20:00 IST" duration-ms="2444" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testMinLengthPassword_TestCase5()[pri:5, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:20:00 IST" name="testMinLengthPassword_TestCase5" finished-at="2024-06-25T16:20:00 IST" duration-ms="353" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMinLengthPassword_TestCase5 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:20:00 IST" name="tearDown" finished-at="2024-06-25T16:20:01 IST" duration-ms="132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:20:43 IST" name="initialize" finished-at="2024-06-25T16:20:45 IST" duration-ms="2433" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testUsernameWithSpaces_TestCase6()[pri:6, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:20:45 IST" name="testUsernameWithSpaces_TestCase6" finished-at="2024-06-25T16:20:45 IST" duration-ms="390" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUsernameWithSpaces_TestCase6 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:20:45 IST" name="tearDown" finished-at="2024-06-25T16:20:46 IST" duration-ms="129" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:20:51 IST" name="initialize" finished-at="2024-06-25T16:20:53 IST" duration-ms="2360" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForEnabledLoginButton_TestCase7()[pri:7, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:20:53 IST" name="verifyForEnabledLoginButton_TestCase7" finished-at="2024-06-25T16:20:56 IST" duration-ms="2501" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForEnabledLoginButton_TestCase7 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:20:56 IST" name="tearDown" finished-at="2024-06-25T16:20:56 IST" duration-ms="363" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:21:01 IST" name="initialize" finished-at="2024-06-25T16:21:04 IST" duration-ms="2363" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsername_TestCase8()[pri:8, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:21:04 IST" name="verifyForDisabledLoginButtonForEmptyUsername_TestCase8" finished-at="2024-06-25T16:21:04 IST" duration-ms="164" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsername_TestCase8 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:21:04 IST" name="tearDown" finished-at="2024-06-25T16:21:04 IST" duration-ms="110" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:21:04 IST" name="initialize" finished-at="2024-06-25T16:21:06 IST" duration-ms="2460" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyPassword_TestCase9()[pri:9, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:21:06 IST" name="verifyForDisabledLoginButtonForEmptyPassword_TestCase9" finished-at="2024-06-25T16:21:07 IST" duration-ms="217" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyPassword_TestCase9 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:21:07 IST" name="tearDown" finished-at="2024-06-25T16:21:07 IST" duration-ms="135" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:21:07 IST" name="initialize" finished-at="2024-06-25T16:21:09 IST" duration-ms="2498" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10()[pri:10, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:21:09 IST" name="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10" finished-at="2024-06-25T16:21:09 IST" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4facf68f]" started-at="2024-06-25T16:21:09 IST" name="tearDown" finished-at="2024-06-25T16:21:10 IST" duration-ms="122" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases -->
      <class name="zapcg.Capillary.LoginTestCases.Login_Valid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@4ac3c60d]" started-at="2024-06-25T16:17:27 IST" name="initialize" finished-at="2024-06-25T16:17:29 IST" duration-ms="2362" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testValidLogin_TestCase1()[pri:1, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@4ac3c60d]" started-at="2024-06-25T16:17:29 IST" name="testValidLogin_TestCase1" finished-at="2024-06-25T16:17:32 IST" duration-ms="2453" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLogin_TestCase1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@4ac3c60d]" started-at="2024-06-25T16:17:32 IST" name="tearDown" finished-at="2024-06-25T16:17:32 IST" duration-ms="118" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Valid_TestCases -->
      <class name="zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:17:20 IST" name="initialize" finished-at="2024-06-25T16:17:25 IST" duration-ms="4478" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="chooseValidLocationForNewUser()[pri:1, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:17:25 IST" name="chooseValidLocationForNewUser" finished-at="2024-06-25T16:17:27 IST" duration-ms="1918" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chooseValidLocationForNewUser -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:17:27 IST" name="tearDown" finished-at="2024-06-25T16:17:27 IST" duration-ms="163" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:18:35 IST" name="initialize" finished-at="2024-06-25T16:18:39 IST" duration-ms="4046" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyDropDownAvailability()[pri:2, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:18:39 IST" name="verifyDropDownAvailability" finished-at="2024-06-25T16:18:39 IST" duration-ms="57" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDropDownAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:18:39 IST" name="tearDown" finished-at="2024-06-25T16:18:39 IST" duration-ms="179" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:19:42 IST" name="initialize" finished-at="2024-06-25T16:19:47 IST" duration-ms="5091" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyIfAbleToSelectOptionFromDropDown()[pri:3, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:19:47 IST" name="verifyIfAbleToSelectOptionFromDropDown" finished-at="2024-06-25T16:19:47 IST" duration-ms="170" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyIfAbleToSelectOptionFromDropDown -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:19:47 IST" name="tearDown" finished-at="2024-06-25T16:19:47 IST" duration-ms="175" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:19:50 IST" name="initialize" finished-at="2024-06-25T16:19:55 IST" duration-ms="4898" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyChooseLocationButtonAvailability()[pri:4, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:19:55 IST" name="verifyChooseLocationButtonAvailability" finished-at="2024-06-25T16:19:57 IST" duration-ms="2217" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyChooseLocationButtonAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:19:57 IST" name="tearDown" finished-at="2024-06-25T16:19:58 IST" duration-ms="145" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:20:01 IST" name="initialize" finished-at="2024-06-25T16:20:05 IST" duration-ms="4924" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyHeaderOfMemberLookupScreen()[pri:5, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:20:05 IST" name="verifyHeaderOfMemberLookupScreen" finished-at="2024-06-25T16:20:37 IST" duration-ms="31939" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[An error occurred while verifying the dropdown selections: no such element: Unable to locate element: {"method":"xpath","selector":"//button[@id='MSMENUI2']"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [e11a32b7ae50c07d9b5176460763df65, findElement {using=xpath, value=//button[@id='MSMENUI2']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:56812}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:56812/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: e11a32b7ae50c07d9b5176460763df65]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: An error occurred while verifying the dropdown selections: no such element: Unable to locate element: {"method":"xpath","selector":"//button[@id='MSMENUI2']"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [e11a32b7ae50c07d9b5176460763df65, findElement {using=xpath, value=//button[@id='MSMENUI2']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:56812}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:56812/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: e11a32b7ae50c07d9b5176460763df65
at org.testng.Assert.fail(Assert.java:111)
at zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases.verifyHeaderOfMemberLookupScreen(Location_ExistingUser_TestCases.java:150)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyHeaderOfMemberLookupScreen -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:20:37 IST" name="tearDown" finished-at="2024-06-25T16:20:38 IST" duration-ms="173" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:20:38 IST" name="initialize" finished-at="2024-06-25T16:20:42 IST" duration-ms="4736" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLookupNavigation()[pri:6, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:20:42 IST" name="burgerIconMemberLookupNavigation" finished-at="2024-06-25T16:20:42 IST" duration-ms="113" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLookupNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:20:42 IST" name="tearDown" finished-at="2024-06-25T16:20:43 IST" duration-ms="231" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:20:46 IST" name="initialize" finished-at="2024-06-25T16:20:51 IST" duration-ms="4999" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLocationNavigation()[pri:7, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:20:51 IST" name="burgerIconMemberLocationNavigation" finished-at="2024-06-25T16:20:51 IST" duration-ms="111" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLocationNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:20:51 IST" name="tearDown" finished-at="2024-06-25T16:20:51 IST" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:20:56 IST" name="initialize" finished-at="2024-06-25T16:21:01 IST" duration-ms="4802" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[iPhone 11 Pro Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconLogout()[pri:8, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:21:01 IST" name="burgerIconLogout" finished-at="2024-06-25T16:21:01 IST" duration-ms="119" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconLogout -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@76508ed1]" started-at="2024-06-25T16:21:01 IST" name="tearDown" finished-at="2024-06-25T16:21:01 IST" duration-ms="331" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases -->
    </test> <!-- LoginTestsChromeBrowseriPhone11ProLandscape -->
    <test started-at="2024-06-25T16:21:10 IST" name="LoginTestsChromeBrowserGalaxyS20Portrait" finished-at="2024-06-25T16:24:48 IST" duration-ms="218255">
      <class name="zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:21:23 IST" name="initialize" finished-at="2024-06-25T16:21:26 IST" duration-ms="2779" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidUsername_TestCase2()[pri:2, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:21:26 IST" name="testInvalidUsername_TestCase2" finished-at="2024-06-25T16:22:26 IST" duration-ms="60392" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidUserNameError(loginPage.java:154)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidUsername_TestCase2(Login_Invalid_TestCases.java:36)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[contains(text(),'Invalid username or password. Try again.')]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [b10a5dc601cc73f2041db3ccc6e19a87, findElement {using=xpath, value=//h6[contains(text(),'Invalid username or password. Try again.')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:57052}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:57052/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: b10a5dc601cc73f2041db3ccc6e19a87
at jdk.internal.reflect.GeneratedConstructorAccessor36.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidUsername_TestCase2 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:22:26 IST" name="tearDown" finished-at="2024-06-25T16:22:27 IST" duration-ms="140" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:22:33 IST" name="initialize" finished-at="2024-06-25T16:22:35 IST" duration-ms="2795" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidPassword_TestCase3()[pri:3, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:22:35 IST" name="testInvalidPassword_TestCase3" finished-at="2024-06-25T16:23:36 IST" duration-ms="60339" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidPasswordError(loginPage.java:185)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidPassword_TestCase3(Login_Invalid_TestCases.java:44)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [21255b2c1f6689a806ed71f386327df3, findElement {using=xpath, value=//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:57142}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:57142/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 21255b2c1f6689a806ed71f386327df3
at jdk.internal.reflect.GeneratedConstructorAccessor36.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidPassword_TestCase3 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:23:36 IST" name="tearDown" finished-at="2024-06-25T16:23:36 IST" duration-ms="147" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:23:42 IST" name="initialize" finished-at="2024-06-25T16:23:45 IST" duration-ms="2859" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testTooLongUsername_TestCase4()[pri:4, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:23:45 IST" name="testTooLongUsername_TestCase4" finished-at="2024-06-25T16:23:46 IST" duration-ms="462" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTooLongUsername_TestCase4 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:23:46 IST" name="tearDown" finished-at="2024-06-25T16:23:46 IST" duration-ms="147" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:23:54 IST" name="initialize" finished-at="2024-06-25T16:23:57 IST" duration-ms="2765" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testMinLengthPassword_TestCase5()[pri:5, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:23:57 IST" name="testMinLengthPassword_TestCase5" finished-at="2024-06-25T16:23:57 IST" duration-ms="373" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMinLengthPassword_TestCase5 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:23:57 IST" name="tearDown" finished-at="2024-06-25T16:23:58 IST" duration-ms="157" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:24:15 IST" name="initialize" finished-at="2024-06-25T16:24:18 IST" duration-ms="2754" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testUsernameWithSpaces_TestCase6()[pri:6, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:24:18 IST" name="testUsernameWithSpaces_TestCase6" finished-at="2024-06-25T16:24:19 IST" duration-ms="332" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUsernameWithSpaces_TestCase6 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:24:19 IST" name="tearDown" finished-at="2024-06-25T16:24:19 IST" duration-ms="129" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:24:24 IST" name="initialize" finished-at="2024-06-25T16:24:27 IST" duration-ms="2744" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForEnabledLoginButton_TestCase7()[pri:7, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:24:27 IST" name="verifyForEnabledLoginButton_TestCase7" finished-at="2024-06-25T16:24:29 IST" duration-ms="1906" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForEnabledLoginButton_TestCase7 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:24:29 IST" name="tearDown" finished-at="2024-06-25T16:24:29 IST" duration-ms="191" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:24:36 IST" name="initialize" finished-at="2024-06-25T16:24:39 IST" duration-ms="2733" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsername_TestCase8()[pri:8, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:24:39 IST" name="verifyForDisabledLoginButtonForEmptyUsername_TestCase8" finished-at="2024-06-25T16:24:39 IST" duration-ms="165" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsername_TestCase8 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:24:39 IST" name="tearDown" finished-at="2024-06-25T16:24:39 IST" duration-ms="138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:24:39 IST" name="initialize" finished-at="2024-06-25T16:24:42 IST" duration-ms="2780" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyPassword_TestCase9()[pri:9, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:24:42 IST" name="verifyForDisabledLoginButtonForEmptyPassword_TestCase9" finished-at="2024-06-25T16:24:42 IST" duration-ms="220" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyPassword_TestCase9 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:24:42 IST" name="tearDown" finished-at="2024-06-25T16:24:42 IST" duration-ms="132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:24:42 IST" name="initialize" finished-at="2024-06-25T16:24:48 IST" duration-ms="5447" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10()[pri:10, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:24:48 IST" name="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10" finished-at="2024-06-25T16:24:48 IST" duration-ms="148" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@4f209819]" started-at="2024-06-25T16:24:48 IST" name="tearDown" finished-at="2024-06-25T16:24:48 IST" duration-ms="133" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases -->
      <class name="zapcg.Capillary.LoginTestCases.Login_Valid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@3d74bf60]" started-at="2024-06-25T16:21:17 IST" name="initialize" finished-at="2024-06-25T16:21:20 IST" duration-ms="3118" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testValidLogin_TestCase1()[pri:1, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@3d74bf60]" started-at="2024-06-25T16:21:20 IST" name="testValidLogin_TestCase1" finished-at="2024-06-25T16:21:23 IST" duration-ms="2933" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLogin_TestCase1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@3d74bf60]" started-at="2024-06-25T16:21:23 IST" name="tearDown" finished-at="2024-06-25T16:21:23 IST" duration-ms="92" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Valid_TestCases -->
      <class name="zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:21:10 IST" name="initialize" finished-at="2024-06-25T16:21:15 IST" duration-ms="5004" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="chooseValidLocationForNewUser()[pri:1, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:21:15 IST" name="chooseValidLocationForNewUser" finished-at="2024-06-25T16:21:17 IST" duration-ms="2450" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chooseValidLocationForNewUser -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:21:17 IST" name="tearDown" finished-at="2024-06-25T16:21:17 IST" duration-ms="166" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:22:27 IST" name="initialize" finished-at="2024-06-25T16:22:32 IST" duration-ms="5701" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyDropDownAvailability()[pri:2, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:22:32 IST" name="verifyDropDownAvailability" finished-at="2024-06-25T16:22:32 IST" duration-ms="58" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDropDownAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:22:32 IST" name="tearDown" finished-at="2024-06-25T16:22:33 IST" duration-ms="149" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:23:36 IST" name="initialize" finished-at="2024-06-25T16:23:42 IST" duration-ms="6034" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyIfAbleToSelectOptionFromDropDown()[pri:3, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:23:42 IST" name="verifyIfAbleToSelectOptionFromDropDown" finished-at="2024-06-25T16:23:42 IST" duration-ms="185" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyIfAbleToSelectOptionFromDropDown -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:23:42 IST" name="tearDown" finished-at="2024-06-25T16:23:42 IST" duration-ms="317" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:23:46 IST" name="initialize" finished-at="2024-06-25T16:23:52 IST" duration-ms="6054" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyChooseLocationButtonAvailability()[pri:4, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:23:52 IST" name="verifyChooseLocationButtonAvailability" finished-at="2024-06-25T16:23:54 IST" duration-ms="2260" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyChooseLocationButtonAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:23:54 IST" name="tearDown" finished-at="2024-06-25T16:23:54 IST" duration-ms="133" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:23:58 IST" name="initialize" finished-at="2024-06-25T16:24:03 IST" duration-ms="5476" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyHeaderOfMemberLookupScreen()[pri:5, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:24:03 IST" name="verifyHeaderOfMemberLookupScreen" finished-at="2024-06-25T16:24:09 IST" duration-ms="6362" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyHeaderOfMemberLookupScreen -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:24:09 IST" name="tearDown" finished-at="2024-06-25T16:24:10 IST" duration-ms="133" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:24:10 IST" name="initialize" finished-at="2024-06-25T16:24:15 IST" duration-ms="5658" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLookupNavigation()[pri:6, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:24:15 IST" name="burgerIconMemberLookupNavigation" finished-at="2024-06-25T16:24:15 IST" duration-ms="120" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLookupNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:24:15 IST" name="tearDown" finished-at="2024-06-25T16:24:15 IST" duration-ms="136" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:24:19 IST" name="initialize" finished-at="2024-06-25T16:24:24 IST" duration-ms="5355" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLocationNavigation()[pri:7, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:24:24 IST" name="burgerIconMemberLocationNavigation" finished-at="2024-06-25T16:24:24 IST" duration-ms="101" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLocationNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:24:24 IST" name="tearDown" finished-at="2024-06-25T16:24:24 IST" duration-ms="180" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:24:29 IST" name="initialize" finished-at="2024-06-25T16:24:36 IST" duration-ms="6493" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Portrait]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconLogout()[pri:8, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:24:36 IST" name="burgerIconLogout" finished-at="2024-06-25T16:24:36 IST" duration-ms="134" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconLogout -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@15eb5ee5]" started-at="2024-06-25T16:24:36 IST" name="tearDown" finished-at="2024-06-25T16:24:36 IST" duration-ms="128" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases -->
    </test> <!-- LoginTestsChromeBrowserGalaxyS20Portrait -->
    <test started-at="2024-06-25T16:24:48 IST" name="LoginTestsChromeBrowserGalaxyS20Landscape" finished-at="2024-06-25T16:28:42 IST" duration-ms="234247">
      <class name="zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:25:01 IST" name="initialize" finished-at="2024-06-25T16:25:03 IST" duration-ms="2008" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidUsername_TestCase2()[pri:2, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:25:03 IST" name="testInvalidUsername_TestCase2" finished-at="2024-06-25T16:26:04 IST" duration-ms="60272" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[contains(text(),'Invalid username or password. Try again.')]' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidUserNameError(loginPage.java:154)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidUsername_TestCase2(Login_Invalid_TestCases.java:36)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[contains(text(),'Invalid username or password. Try again.')]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [176d30174cc5e39d02ec2fd3b3d07112, findElement {using=xpath, value=//h6[contains(text(),'Invalid username or password. Try again.')]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:57551}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:57551/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 176d30174cc5e39d02ec2fd3b3d07112
at jdk.internal.reflect.GeneratedConstructorAccessor36.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidUsername_TestCase2 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:26:04 IST" name="tearDown" finished-at="2024-06-25T16:26:04 IST" duration-ms="158" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:26:09 IST" name="initialize" finished-at="2024-06-25T16:26:11 IST" duration-ms="2374" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testInvalidPassword_TestCase3()[pri:3, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:26:11 IST" name="testInvalidPassword_TestCase3" finished-at="2024-06-25T16:27:12 IST" duration-ms="60327" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at zapcg.Capillary.PageObject.loginPage.verifyInvalidPasswordError(loginPage.java:185)
at zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases.testInvalidPassword_TestCase3(Login_Invalid_TestCases.java:44)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [b74538cc505408a11206e024c46a91d4, findElement {using=xpath, value=//h6[@id='LSERRM' and contains(text(),"Invalid username or password. Try again.")]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:57645}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:57645/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: b74538cc505408a11206e024c46a91d4
at jdk.internal.reflect.GeneratedConstructorAccessor36.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy10.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidPassword_TestCase3 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:27:12 IST" name="tearDown" finished-at="2024-06-25T16:27:12 IST" duration-ms="137" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:27:17 IST" name="initialize" finished-at="2024-06-25T16:27:20 IST" duration-ms="2431" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testTooLongUsername_TestCase4()[pri:4, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:27:20 IST" name="testTooLongUsername_TestCase4" finished-at="2024-06-25T16:27:20 IST" duration-ms="501" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTooLongUsername_TestCase4 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:27:20 IST" name="tearDown" finished-at="2024-06-25T16:27:20 IST" duration-ms="148" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:27:27 IST" name="initialize" finished-at="2024-06-25T16:27:29 IST" duration-ms="2319" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testMinLengthPassword_TestCase5()[pri:5, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:27:29 IST" name="testMinLengthPassword_TestCase5" finished-at="2024-06-25T16:27:29 IST" duration-ms="320" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMinLengthPassword_TestCase5 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:27:29 IST" name="tearDown" finished-at="2024-06-25T16:27:30 IST" duration-ms="161" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:28:12 IST" name="initialize" finished-at="2024-06-25T16:28:14 IST" duration-ms="2410" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testUsernameWithSpaces_TestCase6()[pri:6, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:28:14 IST" name="testUsernameWithSpaces_TestCase6" finished-at="2024-06-25T16:28:14 IST" duration-ms="353" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUsernameWithSpaces_TestCase6 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:28:14 IST" name="tearDown" finished-at="2024-06-25T16:28:14 IST" duration-ms="132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:28:20 IST" name="initialize" finished-at="2024-06-25T16:28:22 IST" duration-ms="2504" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForEnabledLoginButton_TestCase7()[pri:7, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:28:22 IST" name="verifyForEnabledLoginButton_TestCase7" finished-at="2024-06-25T16:28:25 IST" duration-ms="2521" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForEnabledLoginButton_TestCase7 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:28:25 IST" name="tearDown" finished-at="2024-06-25T16:28:25 IST" duration-ms="239" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:28:33 IST" name="initialize" finished-at="2024-06-25T16:28:36 IST" duration-ms="3019" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsername_TestCase8()[pri:8, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:28:36 IST" name="verifyForDisabledLoginButtonForEmptyUsername_TestCase8" finished-at="2024-06-25T16:28:36 IST" duration-ms="173" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsername_TestCase8 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:28:36 IST" name="tearDown" finished-at="2024-06-25T16:28:36 IST" duration-ms="123" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:28:36 IST" name="initialize" finished-at="2024-06-25T16:28:39 IST" duration-ms="2467" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyPassword_TestCase9()[pri:9, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:28:39 IST" name="verifyForDisabledLoginButtonForEmptyPassword_TestCase9" finished-at="2024-06-25T16:28:39 IST" duration-ms="236" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyPassword_TestCase9 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:28:39 IST" name="tearDown" finished-at="2024-06-25T16:28:39 IST" duration-ms="148" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:28:39 IST" name="initialize" finished-at="2024-06-25T16:28:42 IST" duration-ms="2633" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10()[pri:10, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:28:42 IST" name="verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10" finished-at="2024-06-25T16:28:42 IST" duration-ms="162" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForDisabledLoginButtonForEmptyUsernamePassword_TestCase10 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases@3daa422a]" started-at="2024-06-25T16:28:42 IST" name="tearDown" finished-at="2024-06-25T16:28:42 IST" duration-ms="170" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Invalid_TestCases -->
      <class name="zapcg.Capillary.LoginTestCases.Login_Valid_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@72f926e6]" started-at="2024-06-25T16:24:56 IST" name="initialize" finished-at="2024-06-25T16:24:59 IST" duration-ms="2556" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="testValidLogin_TestCase1()[pri:1, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@72f926e6]" started-at="2024-06-25T16:24:59 IST" name="testValidLogin_TestCase1" finished-at="2024-06-25T16:25:01 IST" duration-ms="2563" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLogin_TestCase1 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LoginTestCases.Login_Valid_TestCases@72f926e6]" started-at="2024-06-25T16:25:01 IST" name="tearDown" finished-at="2024-06-25T16:25:01 IST" duration-ms="90" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LoginTestCases.Login_Valid_TestCases -->
      <class name="zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases">
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:24:48 IST" name="initialize" finished-at="2024-06-25T16:24:53 IST" duration-ms="4822" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="chooseValidLocationForNewUser()[pri:1, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:24:53 IST" name="chooseValidLocationForNewUser" finished-at="2024-06-25T16:24:56 IST" duration-ms="3473" status="FAIL">
          <exception class="org.openqa.selenium.ElementClickInterceptedException">
            <message>
              <![CDATA[element click intercepted: Element <button class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary css-y7km40" tabindex="0" type="button" data-testid="LS014B" id="LS014B">...</button> is not clickable at point (383, 193). Other element would receive the click: <li tabindex="-1" role="option" id="LS013OP1" data-option-index="1" aria-disabled="false" aria-selected="false" class="MuiAutocomplete-option" data-testid="LS013OP1">...</li>
  (Session info: chrome=126.0.6478.62)
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [0593ae2063595f05b28a39da01ee1505, clickElement {id=f.8C544020C450652522A7EC69391AA474.d.A2F8B21F8EA7972870813B06D3424458.e.54}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:57503}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:57503/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Element: [[ChromeDriver: chrome on windows (0593ae2063595f05b28a39da01ee1505)] -> xpath: //button[@id='LS014B']]
Session ID: 0593ae2063595f05b28a39da01ee1505]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.ElementClickInterceptedException: element click intercepted: Element <button class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeMedium MuiButton-containedSizeMedium MuiButton-colorPrimary css-y7km40" tabindex="0" type="button" data-testid="LS014B" id="LS014B">...</button> is not clickable at point (383, 193). Other element would receive the click: <li tabindex="-1" role="option" id="LS013OP1" data-option-index="1" aria-disabled="false" aria-selected="false" class="MuiAutocomplete-option" data-testid="LS013OP1">...</li>
  (Session info: chrome=126.0.6478.62)
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [0593ae2063595f05b28a39da01ee1505, clickElement {id=f.8C544020C450652522A7EC69391AA474.d.A2F8B21F8EA7972870813B06D3424458.e.54}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:57503}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:57503/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Element: [[ChromeDriver: chrome on windows (0593ae2063595f05b28a39da01ee1505)] -> xpath: //button[@id='LS014B']]
Session ID: 0593ae2063595f05b28a39da01ee1505
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:223)
at org.openqa.selenium.remote.RemoteWebElement.click(RemoteWebElement.java:76)
at jdk.internal.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:51)
at jdk.proxy2/jdk.proxy2.$Proxy10.click(Unknown Source)
at zapcg.Capillary.PageObject.locationSelectionPage.clickOnChooseLocationButton(locationSelectionPage.java:149)
at zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases.chooseValidLocationForNewUser(Location_ExistingUser_TestCases.java:53)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.ElementClickInterceptedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chooseValidLocationForNewUser -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:24:56 IST" name="tearDown" finished-at="2024-06-25T16:24:56 IST" duration-ms="167" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:26:04 IST" name="initialize" finished-at="2024-06-25T16:26:09 IST" duration-ms="4952" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyDropDownAvailability()[pri:2, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:26:09 IST" name="verifyDropDownAvailability" finished-at="2024-06-25T16:26:09 IST" duration-ms="47" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDropDownAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:26:09 IST" name="tearDown" finished-at="2024-06-25T16:26:09 IST" duration-ms="156" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:27:12 IST" name="initialize" finished-at="2024-06-25T16:27:17 IST" duration-ms="4956" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyIfAbleToSelectOptionFromDropDown()[pri:3, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:27:17 IST" name="verifyIfAbleToSelectOptionFromDropDown" finished-at="2024-06-25T16:27:17 IST" duration-ms="179" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyIfAbleToSelectOptionFromDropDown -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:27:17 IST" name="tearDown" finished-at="2024-06-25T16:27:17 IST" duration-ms="150" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:27:20 IST" name="initialize" finished-at="2024-06-25T16:27:25 IST" duration-ms="4688" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyChooseLocationButtonAvailability()[pri:4, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:27:25 IST" name="verifyChooseLocationButtonAvailability" finished-at="2024-06-25T16:27:27 IST" duration-ms="1654" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyChooseLocationButtonAvailability -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:27:27 IST" name="tearDown" finished-at="2024-06-25T16:27:27 IST" duration-ms="142" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:27:30 IST" name="initialize" finished-at="2024-06-25T16:27:34 IST" duration-ms="4701" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="verifyHeaderOfMemberLookupScreen()[pri:5, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:27:34 IST" name="verifyHeaderOfMemberLookupScreen" finished-at="2024-06-25T16:28:06 IST" duration-ms="31965" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[An error occurred while verifying the dropdown selections: no such element: Unable to locate element: {"method":"xpath","selector":"//button[@id='MSMENUI2']"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [ef9068b1e0f16e303461460b3220ca37, findElement {using=xpath, value=//button[@id='MSMENUI2']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:57763}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:57763/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: ef9068b1e0f16e303461460b3220ca37]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: An error occurred while verifying the dropdown selections: no such element: Unable to locate element: {"method":"xpath","selector":"//button[@id='MSMENUI2']"}
  (Session info: chrome=126.0.6478.62)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [ef9068b1e0f16e303461460b3220ca37, findElement {using=xpath, value=//button[@id='MSMENUI2']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 126.0.6478.62, chrome: {chromedriverVersion: 126.0.6478.126 (d36ace6122e..., userDataDir: C:\Users\MANICH~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:57763}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:57763/devtoo..., se:cdpVersion: 126.0.6478.62, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: ef9068b1e0f16e303461460b3220ca37
at org.testng.Assert.fail(Assert.java:111)
at zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases.verifyHeaderOfMemberLookupScreen(Location_ExistingUser_TestCases.java:150)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyHeaderOfMemberLookupScreen -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:28:06 IST" name="tearDown" finished-at="2024-06-25T16:28:06 IST" duration-ms="167" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:28:06 IST" name="initialize" finished-at="2024-06-25T16:28:11 IST" duration-ms="4703" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLookupNavigation()[pri:6, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:28:11 IST" name="burgerIconMemberLookupNavigation" finished-at="2024-06-25T16:28:11 IST" duration-ms="114" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLookupNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:28:11 IST" name="tearDown" finished-at="2024-06-25T16:28:12 IST" duration-ms="337" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:28:14 IST" name="initialize" finished-at="2024-06-25T16:28:19 IST" duration-ms="4851" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconMemberLocationNavigation()[pri:7, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:28:19 IST" name="burgerIconMemberLocationNavigation" finished-at="2024-06-25T16:28:19 IST" duration-ms="110" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconMemberLocationNavigation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:28:19 IST" name="tearDown" finished-at="2024-06-25T16:28:20 IST" duration-ms="217" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialize(java.lang.String,java.lang.String)[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:28:25 IST" name="initialize" finished-at="2024-06-25T16:28:33 IST" duration-ms="7756" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Galaxy S20 Landscape]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method signature="burgerIconLogout()[pri:8, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:28:33 IST" name="burgerIconLogout" finished-at="2024-06-25T16:28:33 IST" duration-ms="118" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- burgerIconLogout -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases@31c88ec8]" started-at="2024-06-25T16:28:33 IST" name="tearDown" finished-at="2024-06-25T16:28:33 IST" duration-ms="164" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- zapcg.Capillary.LocationPageTestCases.Location_ExistingUser_TestCases -->
    </test> <!-- LoginTestsChromeBrowserGalaxyS20Landscape -->
  </suite> <!-- TestSuite -->
</testng-results>
