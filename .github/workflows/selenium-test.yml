name: Java CI with Maven

on:
  push:
    branches:
      - "report-on-slack-check"

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: poc

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'maven'

    - name: Update apt-get
      run: sudo apt-get update

    - name: Fix broken dependencies
      run: sudo apt --fix-broken install -y

    - name: Set up Maven and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y maven libasound2 libasound2-data libnspr4 libnss3 default-jre-headless libjansi-java libmaven3-core-java libwagon-file-java libwagon-http-shaded-java jq

    - name: Googledriver setup
      run: |
        sudo apt install wget -y
        sudo apt install unzip -y
        wget https://dl.google.com/linux/deb/pool/main/g/google-chrome-stable/google-chrome-stable_126.0.6478.126-1_amd64.deb
        sudo dpkg -i google-chrome-stable_126.0.6478.126-1_amd64.deb
        wget https://storage.googleapis.com/chrome-for-testing-public/126.0.6478.126/linux64/chromedriver-linux64.zip
        unzip chromedriver-linux64.zip  
        sudo mv chromedriver-linux64/chromedriver /usr/bin/chromedriver
        sudo chown runner:runner /usr/bin/chromedriver
        sudo chmod +x /usr/bin/chromedriver

    - name: Install xvfb
      run: sudo apt-get install -y xvfb

    - name: Start xvfb
      run: |
        export DISPLAY=:99
        cd automation-testing/
        xvfb-run -a mvn clean install

    - name: Upload test report artifact
      uses: actions/upload-artifact@v3
      with:
        name: TestReport
        path: /home/runner/work/github-actions/github-actions/automation-testing/reports/index.html
        if-no-files-found: warn

    - name: Get Artifact ID
      id: get-artifact-id
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                         -H "Accept: application/vnd.github.v3+json" \
                         "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts")
        echo "Response: $response"
        ARTIFACT_ID=$(echo $response | jq -r '.artifacts[0].id')
        if [ -z "$ARTIFACT_ID" ]; then
          echo "Artifact ID not found"
          exit 1
        fi
        echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV

    - name: Construct artifact URL
      id: construct-url
      run: |
        ARTIFACT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ env.ARTIFACT_ID }}"
        echo "ARTIFACT_URL=$ARTIFACT_URL" >> $GITHUB_ENV

    - name: Send test report to Slack
      env:
        SLACK_CHANNEL: 'test'
        SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
        ARTIFACT_URL: ${{ env.ARTIFACT_URL }}
      run: |
        echo "Sending artifact URL to Slack..."

        # Post a message with the artifact URL
        message_response=$(curl -s -X POST -H "Authorization: Bearer ${SLACK_TOKEN}" \
                                  -H "Content-type: application/json" \
                                  --data "{
                                    \"channel\": \"${SLACK_CHANNEL}\",
                                    \"text\": \"Test Report :rocket:\",
                                    \"attachments\": [
                                      {
                                        \"title\": \"Test Report for Job\",
                                        \"title_link\": \"${ARTIFACT_URL}\",
                                        \"text\": \"The test report can be viewed from the link above.\"
                                      }
                                    ]
                                  }" \
                                  https://slack.com/api/chat.postMessage)
        
        echo "Message response: $message_response"

        # Check if the message was sent successfully
        message_ok=$(echo $message_response | jq -r '.ok')
        if [ "$message_ok" != "true" ]; then
          echo "Message post failed: $message_response"
          exit 1
        fi

        echo "Message posted successfully."
