name: Build and Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - develop
      - stage

jobs:
  # Unit Tests Job (Same for both develop and stage)
  unit_test:
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.action == 'reopened')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.x'

      - name: Run Unit Tests
        run: |
          npm install
          npm run test

  # Environment Specific Job (either develop -> dev or stage -> stage)
  build_and_deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/stage') # Run only if PR is merged and on specific branches    
    environment: ${{ github.ref == 'refs/heads/develop' && 'poc' || 'stage' }} # Set environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.x'

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Set up .env file
        env:
          ENV: ${{ github.ref == 'refs/heads/develop' && 'poc' || 'stage' }} # Dynamically set environment
          VITE_APP_SESSION: ${{ secrets.VITE_APP_SESSION }}
          VITE_APP_BASE_URL: ${{ secrets.VITE_APP_BASE_URL }}
          VITE_APP_TRANSACTION_AMOUNT: ${{ secrets.VITE_APP_TRANSACTION_AMOUNT }}
          VITE_APP_SCAN_LIMIT: ${{ secrets.VITE_APP_SCAN_LIMIT }}
        run: |
          echo "VITE_APP_SESSION=${{ secrets.VITE_APP_SESSION }}" >> .env.${{ secrets.ENV }} 
          echo "VITE_APP_BASE_URL=${{ secrets.VITE_APP_BASE_URL }}" >> .env.${{ secrets.ENV }} 
          echo "VITE_APP_TRANSACTION_AMOUNT=${{ secrets.VITE_APP_TRANSACTION_AMOUNT }}" >> .env.${{ secrets.ENV }} 
          echo "VITE_APP_SCAN_LIMIT=${{ secrets.VITE_APP_SCAN_LIMIT }}" >> .env.${{ secrets.ENV }} 

      - name: Deploy CloudFormation
        env:
          ENV: ${{ github.ref == 'refs/heads/develop' && 'poc' || 'stage' }}
        run: |
          aws cloudformation validate-template --template-body file://portal.yml
          aws cloudformation deploy --stack-name test-stack-ui-${{ secrets.ENV }} \
          --template-file portal.yml \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --parameter-overrides Env=${{ secrets.ENV }}

      - name: Deploy to S3
        env:
          ENV: ${{ github.ref == 'refs/heads/develop' && 'poc' || 'stage' }}
          CFD_ID: ${{ secrets.CFD_ID }}
        run: |
          npm install
          export CI=false
          npm run build:${{ secrets.ENV }}
          aws s3 rm s3://fortress-stack-ui-${{ secrets.ENV }}/ --recursive
          aws s3 sync ./dist s3://fortress-stack-ui-${{ secrets.ENV}}/
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CFD_ID }} --paths "/*"

  # Notification for success
  notify_on_success:
    runs-on: ubuntu-latest
    needs: build_and_deploy
    if: success()
    steps:
      - name: Notify on Success
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          ENVIRONMENT: ${{ github.ref == 'refs/heads/develop' && 'dev' || 'stage' }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "Deployment successful in '${ENVIRONMENT}' environment."
          }' $SLACK_WEBHOOK_URL

  # Notification for failure
  notify_on_failure:
    runs-on: ubuntu-latest
    needs: build_and_deploy
    if: failure()
    steps:
      - name: Notify on Failure
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          ENVIRONMENT: ${{ github.ref == 'refs/heads/develop' && 'dev' || 'stage' }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "Deployment failed in '${ENVIRONMENT}' environment."
          }' $SLACK_WEBHOOK_URL
