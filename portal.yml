AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Env:
    Type: String
    AllowedValues:
      - local
      - dev
      - stage
      - prod
      - poc
      - main

Conditions:
  IsDev: !Equals [!Ref Env, dev]
  IsStage: !Equals [!Ref Env, stage]
  IsProd: !Equals [!Ref Env, prod]
  IsPoc: !Equals [!Ref Env, poc]

Resources:
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub ${AWS::StackName}-s3-origin-oai

  StaticResourcesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: ProjectName
          Value: test
        - Key: Environment
          Value: !If [IsDev, Development, !Ref Env]

  StaticResourcesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticResourcesBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${StaticResourcesBucket}/*

  testIPSet4:
    Type: 'AWS::WAFv2::IPSet'
    Properties:
      Name: test-IPSet
      Scope: CLOUDFRONT
      IPAddressVersion: IPV4
      Addresses: []

  testIPv6:
    Type: 'AWS::WAFv2::IPSet'
    Properties:
      Name: test-IPv6Set
      Scope: CLOUDFRONT
      IPAddressVersion: IPV6
      Addresses: []

  testWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: test-WebACL
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: "testWebACL"
      Rules:
        - Name: AllowIPRule
          Priority: 1
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: allow_ip
          Statement:
            NotStatement:
              Statement:
                IPSetReferenceStatement:
                  Arn: !GetAtt testIPSet4.Arn
        - Name: AllowIP6Rule
          Priority: 1
          Action:
            Allow: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: allow_ip6
          Statement:
             IPSetReferenceStatement:
                Arn: !GetAtt testIPv6.Arn


  # WAFLogGroup:
  #   Type: 'AWS::Logs::LogGroup'
  #   Properties:
  #     LogGroupName: !Sub '/aws/waf/CLOUDFRONT/${testWebACL}'
  #     RetentionInDays: 7

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        WebACLId: !GetAtt testWebACL.Arn
        Comment: !Sub "test-${Env}"
        Origins:
          - DomainName: !Sub ${StaticResourcesBucket}.s3.${AWS::Region}.amazonaws.com
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 500
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_All
      Tags:
        - Key: Project_Name
          Value: test
        - Key: Environment
          Value: !If [IsDev, Development, !Ref Env]

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3WAFPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${StaticResourcesBucket}/ip-list.json
              - Effect: Allow
                Action:
                  - wafv2:UpdateIPSet
                  - wafv2:GetIPSet
                Resource: "*"

  UpdateIPSetFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          s3_client = boto3.client('s3')
          wafv2_client = boto3.client('wafv2')

          def lambda_handler(event, context):
              bucket_name = '${StaticResourcesBucket}'
              object_key = 'ip-list.json'
              ipset_name = '${testIPSet4}'
              scope = 'CLOUDFRONT'

              response = s3_client.get_object(Bucket=bucket_name, Key=object_key)
              ip_list = json.loads(response['Body'].read().decode('utf-8'))
              
              wafv2_client.update_ip_set(
                  Name=${testIPSet4},
                  Scope=scope,
                  Addresses=ip_list['IPAddresses'],
                  LockToken=wafv2_client.get_ip_set(Name=ipset_name, Scope=scope)['LockToken']
              )
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('IPSet updated successfully')
              }
      Runtime: python3.8
      Timeout: 300

  CustomResource:
    Type: Custom::UpdateIPSet
    Properties:
      ServiceToken: !GetAtt UpdateIPSetFunction.Arn
      S3Bucket: !Ref StaticResourcesBucket
      S3Key: 'ip-list.json'
      IPSetName: !Ref testIPSet4