name: Java CI with Maven

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - report-on-slack-check

jobs:
  deploy:
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.action == 'reopened')
    runs-on: ubuntu-latest
    environment:
      name: poc

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'maven'

    - name: Update apt-get
      run: sudo apt-get update

    - name: Fix broken dependencies
      run: sudo apt --fix-broken install -y

    - name: Set up Maven and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y maven libasound2 libasound2-data libnspr4 libnss3 default-jre-headless libjansi-java libmaven3-core-java libwagon-file-java libwagon-http-shaded-java jq

    - name: Googledriver setup
      run: |
        sudo apt install wget -y
        sudo apt install unzip -y
        wget https://dl.google.com/linux/deb/pool/main/g/google-chrome-stable/google-chrome-stable_126.0.6478.126-1_amd64.deb
        sudo dpkg -i google-chrome-stable_126.0.6478.126-1_amd64.deb
        wget https://storage.googleapis.com/chrome-for-testing-public/126.0.6478.126/linux64/chromedriver-linux64.zip
        unzip chromedriver-linux64.zip  
        sudo mv chromedriver-linux64/chromedriver /usr/bin/chromedriver
        sudo chown runner:runner /usr/bin/chromedriver
        sudo chmod +x /usr/bin/chromedriver

    - name: Install xvfb
      run: sudo apt-get install -y xvfb

    - name: Start xvfb
      run: |
        export DISPLAY=:99
        cd automation-testing/
        xvfb-run -a mvn clean install

    - name: Upload test report artifact
      uses: actions/upload-artifact@v3
      with:
        name: TestReport
        path: /home/runner/work/github-actions/github-actions/automation-testing/reports/index.html
        if-no-files-found: warn

  upload-report-to-slack:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download Test Report Artifact
        uses: actions/download-artifact@v2
        with:
          name: TestReport
          path: /home/runner/work/github-actions/github-actions/automation-testing/reports/index.html

      - name: Upload Test Report to Slack
        env:
          SLACK_CHANNEL: 'test'
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
        run: |
          set -e

          # File to upload
          FILE_PATH="/home/runner/work/github-actions/github-actions/automation-testing/reports/index.html"

          if [ ! -f "$FILE_PATH" ]; then
            echo "File not found: $FILE_PATH"
            exit 1
          fi

          echo "Uploading file to Slack..."

          # Upload the file to Slack
          response=$(curl -s -F file=@$FILE_PATH \
                          -F channels=${SLACK_CHANNEL} \
                          -H "Authorization: Bearer ${SLACK_TOKEN}" \
                          https://slack.com/api/files.upload)
          
          echo "Upload response: $response"

          # Check if the upload was successful
          ok=$(echo $response | jq -r '.ok')
          if [ "$ok" != "true" ]; then
            echo "File upload failed: $response"
            exit 1
          fi

          # Extract the file ID from the response
          file_id=$(echo $response | jq -r '.file.id')
          if [ "$file_id" == "null" ]; then
            echo "Failed to get file ID from response: $response"
            exit 1
          fi

          echo "File uploaded successfully with ID: $file_id"

          # Post a message with the file link
          message_response=$(curl -s -X POST -H "Authorization: Bearer ${SLACK_TOKEN}" \
                                    -H "Content-type: application/json" \
                                    --data "{
                                      \"channel\": \"${SLACK_CHANNEL}\",
                                      \"text\": \"Test Report :rocket:\",
                                      \"attachments\": [
                                        {
                                          \"title\": \"Test Report for Job\",
                                          \"title_link\": \"https://slack.com/files/${file_id}\",
                                          \"text\": \"The test report is attached.\"
                                        }
                                      ]
                                    }" \
                                    https://slack.com/api/chat.postMessage)
          
          echo "Message response: $message_response"

          # Check if the message was sent successfully
          message_ok=$(echo $message_response | jq -r '.ok')
          if [ "$message_ok" != "true" ]; then
            echo "Message post failed: $message_response"
            exit 1
          fi

          echo "Message posted successfully."  
